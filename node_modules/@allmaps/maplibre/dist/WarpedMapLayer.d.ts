import { Map, CustomLayerInterface, LngLatBoundsLike } from 'maplibre-gl';
import { WebGL2Renderer, WebGL2WarpedMap } from '@allmaps/render/webgl2';
import { WarpedMapList, WarpedMapLayerOptions } from '@allmaps/render';
import { Projection } from '@allmaps/project';
import { TransformationType, DistortionMeasure } from '@allmaps/transform';
import { Ring, ImageInformations } from '@allmaps/types';

export type MapLibreWarpedMapLayerOptions = WarpedMapLayerOptions;
/**
 * WarpedMapLayer class.
 *
 * This class renders maps from a IIIF Georeference Annotation on a MapLibre map.
 * WarpedMapLayer is implemented using MapLibre's [CustomLayerInterface](https://maplibre.org/maplibre-gl-js/docs/API/interfaces/maplibregl.CustomLayerInterface/).
 */
export declare class WarpedMapLayer implements CustomLayerInterface {
    id: string;
    type: string;
    renderingMode: string;
    map?: Map;
    renderer?: WebGL2Renderer;
    options?: Partial<MapLibreWarpedMapLayerOptions>;
    /**
     * Creates a WarpedMapLayer instance
     *
     * @param id - Unique ID for this layer
     * @param options - options
     */
    constructor(id?: string, options?: Partial<MapLibreWarpedMapLayerOptions>);
    /**
     * Method called when the layer has been added to the Map.
     * @param map - The Map this custom layer was just added to.
     * @param gl - The WebGL 2 context for the map.
     */
    onAdd(map: Map, gl: WebGL2RenderingContext): void;
    /**
     * Method called when the layer has been removed from the Map.
     */
    onRemove(): void;
    /**
     * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/).
     * @param annotation - Georeference Annotation
     * @returns the map IDs of the maps that were added, or an error per map
     */
    addGeoreferenceAnnotation(annotation: unknown): Promise<(string | Error)[]>;
    /**
     * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/).
     * @param annotation - Georeference Annotation
     * @returns the map IDs of the maps that were removed, or an error per map
     */
    removeGeoreferenceAnnotation(annotation: unknown): Promise<(string | Error)[]>;
    /**
     * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.
     * @param annotationUrl - Georeference Annotation
     * @returns the map IDs of the maps that were added, or an error per map
     */
    addGeoreferenceAnnotationByUrl(annotationUrl: string): Promise<(string | Error)[]>;
    /**
     * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.
     * @param annotationUrl - Georeference Annotation
     * @returns - the map IDs of the maps that were removed, or an error per map
     */
    removeGeoreferenceAnnotationByUrl(annotationUrl: string): Promise<(string | Error)[]>;
    /**
     * Adds a Georeferenced map.
     * @param georeferencedMap - Georeferenced map
     * @returns - the map ID of the map that was added, or an error
     */
    addGeoreferencedMap(georeferencedMap: unknown): Promise<string | Error>;
    /**
     * Removes a Georeferenced map.
     * @param georeferencedMap - Georeferenced map
     * @returns - the map ID of the map that was remvoed, or an error
     */
    removeGeoreferencedMap(georeferencedMap: unknown): Promise<string | Error>;
    /**
     * Returns the WarpedMapList object that contains a list of the warped maps of all loaded maps
     * @returns the warped map list
     */
    getWarpedMapList(): WarpedMapList<WebGL2WarpedMap>;
    /**
     * Returns a single map's warped map
     * @param mapId - ID of the map
     * @returns the warped map
     */
    getWarpedMap(mapId: string): WebGL2WarpedMap | undefined;
    /**
     * Make a single map visible
     * @param mapId - ID of the map
     */
    showMap(mapId: string): void;
    /**
     * Make multiple maps visible
     * @param mapIds - IDs of the maps
     */
    showMaps(mapIds: Iterable<string>): void;
    /**
     * Make a single map invisible
     * @param mapId - ID of the map
     */
    hideMap(mapId: string): void;
    /**
     * Make multiple maps invisible
     * @param mapIds - IDs of the maps
     */
    hideMaps(mapIds: Iterable<string>): void;
    /**
     * Returns the visibility of a single map
     * @returns - whether the map is visible
     */
    isMapVisible(mapId: string): boolean | undefined;
    /**
     * Sets the resource mask of a single map
     * @param mapId - ID of the map
     * @param resourceMask - new resource mask
     */
    setMapResourceMask(mapId: string, resourceMask: Ring): void;
    /**
     * Sets the transformation type of multiple maps
     * @param mapIds - IDs of the maps
     * @param transformation - new transformation type
     */
    setMapsTransformationType(mapIds: Iterable<string>, transformation: TransformationType): void;
    /**
     * Sets the distortion measure of multiple maps
     * @param mapIds - IDs of the maps
     * @param distortionMeasure - new transformation type
     */
    setMapsDistortionMeasure(mapIds: Iterable<string>, distortionMeasure?: DistortionMeasure): void;
    /**
     * Sets the internal projection of multiple maps
     * @param mapIds - IDs of the maps
     * @param internalProjection - new internal projection
     */
    setMapsInternalProjection(mapIds: Iterable<string>, internalProjection: Projection): void;
    /**
     * Return the bounding box of all visible maps in the layer (inside or outside of the Viewport), in longitude/latitude coordinates.
     * @returns - bounding box of all warped maps
     */
    getBounds(): LngLatBoundsLike | undefined;
    /**
     * Bring maps to front
     * @param mapIds - IDs of the maps
     */
    bringMapsToFront(mapIds: Iterable<string>): void;
    /**
     * Send maps to back
     * @param mapIds - IDs of the maps
     */
    sendMapsToBack(mapIds: string[]): void;
    /**
     * Bring maps forward
     * @param mapIds - IDs of the maps
     */
    bringMapsForward(mapIds: Iterable<string>): void;
    /**
     * Send maps backward
     * @param mapIds - IDs of the maps
     */
    sendMapsBackward(mapIds: Iterable<string>): void;
    /**
     * Returns the z-index of a single map
     * @param mapId - ID of the warped map
     * @returns - z-index of the warped map
     */
    getMapZIndex(mapId: string): number | undefined;
    /**
     * Sets the object that caches image information
     * @param imageInformations - Object that caches image information
     */
    setImageInformations(imageInformations: ImageInformations): void;
    /**
     * Gets the opacity of the layer
     * @returns opacity of the map
     */
    getOpacity(): number | undefined;
    /**
     * Sets the opacity of the layer
     * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque
     */
    setOpacity(opacity: number): void;
    /**
     * Resets the opacity of the layer to fully opaque
     */
    resetOpacity(): void;
    /**
     * Sets the options
     *
     * @param options - Options
     */
    setOptions(options?: Partial<MapLibreWarpedMapLayerOptions>): void;
    /**
     * Gets the opacity of a single map
     * @param mapId - ID of the map
     * @returns opacity of the map
     */
    getMapOpacity(mapId: string): number | undefined;
    /**
     * Sets the opacity of a single map
     * @param mapId - ID of the map
     * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque
     */
    setMapOpacity(mapId: string, opacity: number): void;
    /**
     * Resets the opacity of a single map to fully opaque
     * @param mapId - ID of the map
     */
    resetMapOpacity(mapId: string): void;
    /**
     * Sets the saturation of a single map
     * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors
     */
    setSaturation(saturation: number): void;
    /**
     * Resets the saturation of a single map to the original colors
     */
    resetSaturation(): void;
    /**
     * Sets the saturation of a single map
     * @param mapId - ID of the map
     * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors
     */
    setMapSaturation(mapId: string, saturation: number): void;
    /**
     * Resets the saturation of a single map to the original colors
     * @param mapId - ID of the map
     */
    resetMapSaturation(mapId: string): void;
    /**
     * Removes a color from all maps
     * @param options - remove color options
     * @param options.hexColor - hex color to remove
     * @param options.threshold - threshold between 0 and 1
     * @param options.hardness - hardness between 0 and 1
     */
    setRemoveColor(options: Partial<{
        hexColor: string;
        threshold: number;
        hardness: number;
    }>): void;
    /**
     * Resets the color removal for all maps
     */
    resetRemoveColor(): void;
    /**
     * Removes a color from a single map
     * @param mapId - ID of the map
     * @param options - remove color options
     * @param options.hexColor - hex color to remove
     * @param options.threshold - threshold between 0 and 1
     * @param options.hardness - hardness between 0 and 1
     */
    setMapRemoveColor(mapId: string, options: Partial<{
        hexColor: string;
        threshold: number;
        hardness: number;
    }>): void;
    /**
     * Resets the color for a single map
     * @param mapId - ID of the map
     */
    resetMapRemoveColor(mapId: string): void;
    /**
     * Sets the colorization for all maps
     * @param hexColor - desired hex color
     */
    setColorize(hexColor: string): void;
    /**
     * Resets the colorization for all maps
     */
    resetColorize(): void;
    /**
     * Sets the colorization for a single mapID of the map
     * @param mapId - ID of the map
     * @param hexColor - desired hex color
     */
    setMapColorize(mapId: string, hexColor: string): void;
    /**
     * Resets the colorization of a single map
     * @param mapId - ID of the map
     */
    resetMapColorize(mapId: string): void;
    /**
     * Removes all warped maps from the layer
     */
    clear(): void;
    /**
     * Trigger repaint.
     */
    triggerRepaint(): void;
    /**
     * Prepare rendering the layer.
     */
    preparerender(): void;
    /**
     * Render the layer.
     */
    render(): void;
    private contextLost;
    private contextRestored;
    private addEventListeners;
    private removeEventListeners;
    private passWarpedMapEvent;
}
