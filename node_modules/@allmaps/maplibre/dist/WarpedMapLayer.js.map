{"version":3,"file":"WarpedMapLayer.js","sources":["../src/WarpedMapLayer.ts"],"sourcesContent":["import { Map, CustomLayerInterface } from 'maplibre-gl'\n\nimport { WebGL2Renderer, WebGL2WarpedMap } from '@allmaps/render/webgl2'\nimport {\n  Viewport,\n  WarpedMapList,\n  WarpedMapEvent,\n  WarpedMapEventType\n} from '@allmaps/render'\nimport {\n  rectangleToSize,\n  sizesToScale,\n  hexToFractionalRgb\n} from '@allmaps/stdlib'\nimport { lonLatToWebMercator, Projection } from '@allmaps/project'\n\nimport type { LngLatBoundsLike } from 'maplibre-gl'\n\nimport type { TransformationType, DistortionMeasure } from '@allmaps/transform'\nimport type { WarpedMapLayerOptions } from '@allmaps/render'\nimport type { Rectangle, Ring, ImageInformations, Point } from '@allmaps/types'\n\nexport type MapLibreWarpedMapLayerOptions = WarpedMapLayerOptions\n\nconst NO_RENDERER_ERROR_MESSAGE =\n  'Renderer not defined. Add the layer to a map before calling this function.'\n\nfunction assertRenderer(\n  renderer?: WebGL2Renderer\n): asserts renderer is WebGL2Renderer {\n  if (!renderer) {\n    throw new Error(NO_RENDERER_ERROR_MESSAGE)\n  }\n}\n\n/**\n * WarpedMapLayer class.\n *\n * This class renders maps from a IIIF Georeference Annotation on a MapLibre map.\n * WarpedMapLayer is implemented using MapLibre's [CustomLayerInterface](https://maplibre.org/maplibre-gl-js/docs/API/interfaces/maplibregl.CustomLayerInterface/).\n */\nexport class WarpedMapLayer implements CustomLayerInterface {\n  id = 'warped-map-layer'\n\n  // @ts-expect-error Adding \"as const\" throws an error in Titus' module-exports library\n  type = 'custom'\n  // @ts-expect-error same as above\n  renderingMode = '2d'\n\n  map?: Map\n  renderer?: WebGL2Renderer\n  options?: Partial<MapLibreWarpedMapLayerOptions>\n\n  /**\n   * Creates a WarpedMapLayer instance\n   *\n   * @param id - Unique ID for this layer\n   * @param options - options\n   */\n  constructor(id?: string, options?: Partial<MapLibreWarpedMapLayerOptions>) {\n    if (id) {\n      this.id = id\n    }\n    this.options = options\n  }\n\n  /**\n   * Method called when the layer has been added to the Map.\n   * @param map - The Map this custom layer was just added to.\n   * @param gl - The WebGL 2 context for the map.\n   */\n  onAdd(map: Map, gl: WebGL2RenderingContext) {\n    this.map = map\n\n    this.renderer = new WebGL2Renderer(gl, this.options)\n    this.addEventListeners()\n  }\n\n  /**\n   * Method called when the layer has been removed from the Map.\n   */\n  onRemove(): void {\n    if (!this.renderer) {\n      return\n    }\n\n    this.removeEventListeners()\n    this.renderer.destroy()\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns the map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    assertRenderer(this.renderer)\n\n    const results =\n      await this.renderer.warpedMapList.addGeoreferenceAnnotation(annotation)\n    this.triggerRepaint()\n\n    return results\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns the map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    assertRenderer(this.renderer)\n\n    const results =\n      await this.renderer.warpedMapList.removeGeoreferenceAnnotation(annotation)\n    this.triggerRepaint()\n\n    return results\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns the map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n\n    return this.addGeoreferenceAnnotation(annotation)\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns - the map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n    const results = this.removeGeoreferenceAnnotation(annotation)\n\n    return results\n  }\n\n  /**\n   * Adds a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns - the map ID of the map that was added, or an error\n   */\n  async addGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    assertRenderer(this.renderer)\n\n    const result =\n      this.renderer.warpedMapList.addGeoreferencedMap(georeferencedMap)\n    this.triggerRepaint()\n\n    return result\n  }\n\n  /**\n   * Removes a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns - the map ID of the map that was remvoed, or an error\n   */\n  async removeGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    assertRenderer(this.renderer)\n\n    const result =\n      this.renderer.warpedMapList.removeGeoreferencedMap(georeferencedMap)\n    this.triggerRepaint()\n\n    return result\n  }\n\n  /**\n   * Returns the WarpedMapList object that contains a list of the warped maps of all loaded maps\n   * @returns the warped map list\n   */\n  getWarpedMapList(): WarpedMapList<WebGL2WarpedMap> {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList\n  }\n\n  /**\n   * Returns a single map's warped map\n   * @param mapId - ID of the map\n   * @returns the warped map\n   */\n  getWarpedMap(mapId: string): WebGL2WarpedMap | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList.getWarpedMap(mapId)\n  }\n\n  /**\n   * Make a single map visible\n   * @param mapId - ID of the map\n   */\n  showMap(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.showMaps([mapId])\n    this.triggerRepaint()\n  }\n\n  /**\n   * Make multiple maps visible\n   * @param mapIds - IDs of the maps\n   */\n  showMaps(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.showMaps(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Make a single map invisible\n   * @param mapId - ID of the map\n   */\n  hideMap(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.hideMaps([mapId])\n    this.triggerRepaint()\n  }\n\n  /**\n   * Make multiple maps invisible\n   * @param mapIds - IDs of the maps\n   */\n  hideMaps(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.hideMaps(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Returns the visibility of a single map\n   * @returns - whether the map is visible\n   */\n  isMapVisible(mapId: string): boolean | undefined {\n    assertRenderer(this.renderer)\n\n    const warpedMap = this.renderer.warpedMapList.getWarpedMap(mapId)\n    return warpedMap?.visible\n  }\n\n  /**\n   * Sets the resource mask of a single map\n   * @param mapId - ID of the map\n   * @param resourceMask - new resource mask\n   */\n  setMapResourceMask(mapId: string, resourceMask: Ring) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapResourceMask(resourceMask, mapId)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the transformation type of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param transformation - new transformation type\n   */\n  setMapsTransformationType(\n    mapIds: Iterable<string>,\n    transformation: TransformationType\n  ) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapsTransformationType(transformation, {\n      mapIds\n    })\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the distortion measure of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param distortionMeasure - new transformation type\n   */\n  setMapsDistortionMeasure(\n    mapIds: Iterable<string>,\n    distortionMeasure?: DistortionMeasure\n  ) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapsDistortionMeasure(distortionMeasure, {\n      mapIds\n    })\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the internal projection of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param internalProjection - new internal projection\n   */\n  setMapsInternalProjection(\n    mapIds: Iterable<string>,\n    internalProjection: Projection\n  ) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setMapsInternalProjection(internalProjection, {\n      mapIds\n    })\n    this.triggerRepaint()\n  }\n\n  /**\n   * Return the bounding box of all visible maps in the layer (inside or outside of the Viewport), in longitude/latitude coordinates.\n   * @returns - bounding box of all warped maps\n   */\n  getBounds(): LngLatBoundsLike | undefined {\n    assertRenderer(this.renderer)\n\n    const bbox = this.renderer.warpedMapList.getMapsBbox({\n      projection: { definition: 'EPSG:4326' }\n    })\n    if (bbox) {\n      return [\n        [bbox[0], bbox[1]],\n        [bbox[2], bbox[3]]\n      ]\n    }\n  }\n\n  /**\n   * Bring maps to front\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsToFront(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.bringMapsToFront(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Send maps to back\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsToBack(mapIds: string[]) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.sendMapsToBack(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Bring maps forward\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsForward(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.bringMapsForward(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Send maps backward\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsBackward(mapIds: Iterable<string>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.sendMapsBackward(mapIds)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Returns the z-index of a single map\n   * @param mapId - ID of the warped map\n   * @returns - z-index of the warped map\n   */\n  getMapZIndex(mapId: string): number | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.warpedMapList.getMapZIndex(mapId)\n  }\n\n  // not getZIndex() here since so such concept in MapLibre\n\n  /**\n   * Sets the object that caches image information\n   * @param imageInformations - Object that caches image information\n   */\n  setImageInformations(imageInformations: ImageInformations) {\n    assertRenderer(this.renderer)\n\n    this.renderer.warpedMapList.setImageInformations(imageInformations)\n  }\n\n  // No setOpacity() and getOpacity() here since these are\n  // already present on the OpenLayers Layer class\n\n  /**\n   * Gets the opacity of the layer\n   * @returns opacity of the map\n   */\n  getOpacity(): number | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.getOpacity()\n  }\n\n  /**\n   * Sets the opacity of the layer\n   * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque\n   */\n  setOpacity(opacity: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setOpacity(opacity)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the opacity of the layer to fully opaque\n   */\n  resetOpacity() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetOpacity()\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the options\n   *\n   * @param options - Options\n   */\n  setOptions(options?: Partial<MapLibreWarpedMapLayerOptions>) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setOptions(options)\n  }\n\n  /**\n   * Gets the opacity of a single map\n   * @param mapId - ID of the map\n   * @returns opacity of the map\n   */\n  getMapOpacity(mapId: string): number | undefined {\n    assertRenderer(this.renderer)\n\n    return this.renderer.getMapOpacity(mapId)\n  }\n\n  /**\n   * Sets the opacity of a single map\n   * @param mapId - ID of the map\n   * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque\n   */\n  setMapOpacity(mapId: string, opacity: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setMapOpacity(mapId, opacity)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the opacity of a single map to fully opaque\n   * @param mapId - ID of the map\n   */\n  resetMapOpacity(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapOpacity(mapId)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setSaturation(saturation: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setSaturation(saturation)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   */\n  resetSaturation() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetSaturation()\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param mapId - ID of the map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setMapSaturation(mapId: string, saturation: number) {\n    assertRenderer(this.renderer)\n\n    this.renderer.setMapSaturation(mapId, saturation)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   * @param mapId - ID of the map\n   */\n  resetMapSaturation(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapSaturation(mapId)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Removes a color from all maps\n   * @param options - remove color options\n   * @param options.hexColor - hex color to remove\n   * @param options.threshold - threshold between 0 and 1\n   * @param options.hardness - hardness between 0 and 1\n   */\n  setRemoveColor(\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    assertRenderer(this.renderer)\n\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setRemoveColorOptions({\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the color removal for all maps\n   */\n  resetRemoveColor() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetRemoveColorOptions()\n    this.triggerRepaint()\n  }\n\n  /**\n   * Removes a color from a single map\n   * @param mapId - ID of the map\n   * @param options - remove color options\n   * @param options.hexColor - hex color to remove\n   * @param options.threshold - threshold between 0 and 1\n   * @param options.hardness - hardness between 0 and 1\n   */\n  setMapRemoveColor(\n    mapId: string,\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    assertRenderer(this.renderer)\n\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setMapRemoveColorOptions(mapId, {\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this.triggerRepaint()\n  }\n\n  /**\n   * Resets the color for a single map\n   * @param mapId - ID of the map\n   */\n  resetMapRemoveColor(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapRemoveColorOptions(mapId)\n  }\n\n  /**\n   * Sets the colorization for all maps\n   * @param hexColor - desired hex color\n   */\n  setColorize(hexColor: string) {\n    assertRenderer(this.renderer)\n\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setColorizeOptions({ color })\n      this.triggerRepaint()\n    }\n  }\n\n  /**\n   * Resets the colorization for all maps\n   */\n  resetColorize() {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetColorizeOptions()\n    this.triggerRepaint()\n  }\n\n  /**\n   * Sets the colorization for a single mapID of the map\n   * @param mapId - ID of the map\n   * @param hexColor - desired hex color\n   */\n  setMapColorize(mapId: string, hexColor: string) {\n    assertRenderer(this.renderer)\n\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setMapColorizeOptions(mapId, { color })\n      this.triggerRepaint()\n    }\n  }\n\n  /**\n   * Resets the colorization of a single map\n   * @param mapId - ID of the map\n   */\n  resetMapColorize(mapId: string) {\n    assertRenderer(this.renderer)\n\n    this.renderer.resetMapColorizeOptions(mapId)\n    this.triggerRepaint()\n  }\n\n  /**\n   * Removes all warped maps from the layer\n   */\n  clear() {\n    assertRenderer(this.renderer)\n\n    this.renderer.clear()\n    this.triggerRepaint()\n  }\n\n  /**\n   * Trigger repaint.\n   */\n  triggerRepaint(): void {\n    this.map?.triggerRepaint()\n  }\n\n  /**\n   * Prepare rendering the layer.\n   */\n  preparerender(): void {\n    // Empty function to make TypeScript happy\n  }\n\n  /**\n   * Render the layer.\n   */\n  render(): void {\n    if (!this.map) {\n      return\n    }\n    if (!this.renderer) {\n      return\n    }\n\n    // Getting the viewportSize should also be possible through getting the bounds\n    // And using project() to go to resource coordintas\n    const canvas = this.map.getCanvas()\n    const viewportSize = [\n      canvas.width / window.devicePixelRatio,\n      canvas.height / window.devicePixelRatio\n    ] as [number, number]\n\n    const geoCenterAsLngLat = this.map.getCenter()\n    const projectedGeoCenter = lonLatToWebMercator([\n      geoCenterAsLngLat.lng,\n      geoCenterAsLngLat.lat\n    ]) as Point\n\n    const geoLowerLeftAsLngLat = this.map.unproject([0, viewportSize[1]])\n    const geoLowerRightAsLngLat = this.map.unproject([\n      viewportSize[0],\n      viewportSize[1]\n    ])\n    const geoUpperRightAsLngLat = this.map.unproject([viewportSize[0], 0])\n    const geoUpperLeftAsLngLat = this.map.unproject([0, 0])\n    // TODO: project using map projection instead of supposing Mercator\n    // Possible first step could be to use MapLibre's Mercator computation. Example:\n    // const projectedGeoLowerLeftAsMercatorCoordinate = MercatorCoordinate.fromLngLat(geoLowerLeftAsLngLat)\n    // const projectedGeoLowerLeftAsPoint = [projectedGeoLowerLeftAsMercatorCoordinate.x, projectedGeoLowerLeftAsMercatorCoordinate.y]\n    // But this delivers results in Mercator coordinates that are rescaled to fit in a [0, 0] to [1, 1] rectangle.\n    const projectedGeoLowerLeftAsPoint = lonLatToWebMercator([\n      geoLowerLeftAsLngLat.lng,\n      geoLowerLeftAsLngLat.lat\n    ])\n    const projectedGeoLowerRightAsPoint = lonLatToWebMercator([\n      geoLowerRightAsLngLat.lng,\n      geoLowerRightAsLngLat.lat\n    ])\n    const projectedGeoUpperRightAsPoint = lonLatToWebMercator([\n      geoUpperRightAsLngLat.lng,\n      geoUpperRightAsLngLat.lat\n    ])\n    const projectedGeoUpperLeftAsPoint = lonLatToWebMercator([\n      geoUpperLeftAsLngLat.lng,\n      geoUpperLeftAsLngLat.lat\n    ])\n    const projectedGeoRectangle = [\n      projectedGeoLowerLeftAsPoint,\n      projectedGeoLowerRightAsPoint,\n      projectedGeoUpperRightAsPoint,\n      projectedGeoUpperLeftAsPoint\n    ] as Rectangle\n    const projectedGeoSize = rectangleToSize(projectedGeoRectangle)\n    const projectedGeoPerViewportScale = sizesToScale(\n      projectedGeoSize,\n      viewportSize\n    )\n\n    const rotation = -(this.map.getBearing() / 180) * Math.PI\n\n    const devicePixelRatio = window.devicePixelRatio\n\n    const viewport = new Viewport(\n      viewportSize,\n      projectedGeoCenter,\n      projectedGeoPerViewportScale,\n      { rotation, devicePixelRatio }\n    )\n\n    this.renderer.render(viewport)\n  }\n\n  private contextLost() {\n    this.renderer?.contextLost()\n  }\n\n  private contextRestored() {\n    this.renderer?.contextRestored()\n  }\n\n  private addEventListeners() {\n    if (!this.renderer || !this.map) {\n      return\n    }\n\n    this.map.on('webglcontextlost', this.contextLost.bind(this))\n    this.map.on('webglcontextrestored', this.contextRestored.bind(this))\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.CHANGED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.GEOREFERENCEANNOTATIONADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.CLEARED,\n      this.triggerRepaint.bind(this)\n    )\n  }\n\n  private removeEventListeners() {\n    if (!this.renderer || !this.map) {\n      return\n    }\n\n    this.map.off('webglcontextlost', this.contextLost.bind(this))\n    this.map.off('webglcontextrestored', this.contextRestored.bind(this))\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.CHANGED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.GEOREFERENCEANNOTATIONADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this.triggerRepaint.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.CLEARED,\n      this.triggerRepaint.bind(this)\n    )\n  }\n\n  private passWarpedMapEvent(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      if (this.map) {\n        this.map.fire(event.type, event.data)\n      }\n    }\n  }\n}\n"],"names":[],"mappings":"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"}