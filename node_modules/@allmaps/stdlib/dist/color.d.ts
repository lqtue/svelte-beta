import type { Color, ColorWithTransparancy } from '@allmaps/types';
/**
 * Convert RBG to HEX
 * @param rgb - RGB color array, e.g. [0, 51, 255]
 * @returns HEX string, e.g. '#0033ff'
 */
export declare function rgbToHex(color: Color): string;
/**
 * Convert RBGA to HEX
 * @param rgb - RGBA color array, e.g. [0, 51, 255, 255]
 * @returns HEX string, e.g. '#0033ffff'
 */
export declare function rgbaToHex(color: ColorWithTransparancy): string;
/**
 * Convert HEX to RGB
 * @param hex - HEX string, e.g. '#0033ff'
 * @returns RGB, e.g. [0, 51, 255]
 */
export declare function hexToRgb(hex: string): Color;
/**
 * Convert HEX to RGB
 * @param hex - HEX string, e.g. '#0033ffff'
 * @returns RGB, e.g. [0, 51, 255, 255]
 */
export declare function hexToRgba(hex: string): ColorWithTransparancy;
/**
 * Convert HEX to RGB, and sets the transparency to 255
 * @param hex - HEX string, e.g. '#0033ffcc'
 * @returns RGB, e.g. [0, 51, 255, 255]
 */
export declare function hexToOpaqueRgba(hex: string): ColorWithTransparancy;
/**
 * Convert hex to fractional RGB
 * @param hex - hex string, e.g. '#0033ff'
 * @returns Fractional RGB, e.g. [0, 0.2, 1]
 */
export declare function hexToFractionalRgb(hex: string): Color;
/**
 * Convert hex to fractional RGBA
 * @param hex - hex string, e.g. '#0033ffff'
 * @returns Fractional RGB, e.g. [0, 0.2, 1, 1]
 */
export declare function hexToFractionalRgba(hex: string): ColorWithTransparancy;
/**
 * Convert hex to fractional RGBA, and sets the transparency to 1
 * @param hex - hex string, e.g. '#0033ffcc'
 * @returns Fractional RGB, e.g. [0, 0.2, 1, 1]
 */
export declare function hexToFractionalOpaqueRgba(hex: string): ColorWithTransparancy;
