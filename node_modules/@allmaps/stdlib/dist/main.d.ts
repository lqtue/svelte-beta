export declare function degreesToRadians(degrees: number): number;
export declare function groupBy<T, K extends keyof any>(arr: T[], key: (i: T) => K): Record<K, T[]>;
export declare function isEqualArray<T>(array0: T[], array1: T[], isEqualObject?: (t0: T, t1: T) => boolean): boolean;
export declare function arrayDifference<T>(array0: T[], array1: T[], isEqualObject?: (t0: T, t1: T) => boolean): T[];
export declare function arrayUnique<T>(array: T[], isEqualObject?: (t0: T, t1: T) => boolean): T[];
export declare function arrayRepeated<T>(array: T[], isEqualObject?: (t0: T, t1: T) => boolean): T[];
export declare function subSetArray<T>(arr1: Array<T>, arr2: Array<T>): boolean;
export declare function equalSet<T>(set1: Set<T> | null, set2: Set<T> | null): boolean;
export declare function maxOfNumberOrUndefined(number1: number | undefined, number2: number | undefined): number | undefined;
export declare function isValidHttpUrl(string: string): boolean;
