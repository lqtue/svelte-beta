import { BaseLinearWeightsTransformation } from './BaseLinearWeightsTransformation.js';
import type { Point, Size } from '@allmaps/types';
import type { TransformationType } from '../shared/types.js';
/**
 * Base class for transformation that are a linear combination of weights,
 * where the system of equations for x and y are independent and can hence be solved separately.
 */
export declare abstract class BaseIndependentLinearWeightsTransformation extends BaseLinearWeightsTransformation {
    abstract coefsArrayMatrices: [number[][], number[][]];
    abstract coefsArrayMatrix: number[][];
    abstract coefsArrayMatricesSize: [Size, Size];
    abstract coefsArrayMatrixSize: Size;
    constructor(sourcePoints: Point[], destinationPoints: Point[], type: TransformationType, pointCountMinimum: number);
    getCoefsArrayMatrices(): [number[][], number[][]];
    abstract getCoefsArrayMatrix(): number[][];
    getSourcePointCoefsArrays(sourcePoint: Point): [number[], number[]];
    abstract getSourcePointCoefsArray(sourcePoint: Point): number[];
}
