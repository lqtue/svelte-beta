{"version":3,"file":"WarpedMapLayer.js","sources":["../src/WarpedMapLayer.ts"],"sourcesContent":["import Layer from 'ol/layer/Layer.js'\n\nimport { WebGL2Renderer, WebGL2WarpedMap } from '@allmaps/render/webgl2'\nimport {\n  Viewport,\n  WarpedMapList,\n  WarpedMapEvent,\n  WarpedMapEventType\n} from '@allmaps/render'\nimport { hexToFractionalRgb } from '@allmaps/stdlib'\nimport { OLWarpedMapEvent } from './OLWarpedMapEvent.js'\n\nimport type { FrameState } from 'ol/Map.js'\nimport type { Extent } from 'ol/extent'\n\nimport type { DistortionMeasure, TransformationType } from '@allmaps/transform'\nimport type { WarpedMapLayerOptions } from '@allmaps/render'\nimport type { Ring, ImageInformations, Gcp } from '@allmaps/types'\n\nexport type OpenLayersWarpedMapLayerOptions = WarpedMapLayerOptions\n\n/**\n * WarpedMapLayer class.\n *\n * This class renders georeferenced maps from a Georeference Annotation on an OpenLayers map.\n * WarpedMapLayer is a subclass of [Layer](https://openlayers.org/en/latest/apidoc/module-ol_layer_Layer-Layer.html).\n */\nexport class WarpedMapLayer extends Layer {\n  container: HTMLElement\n\n  canvas: HTMLCanvasElement\n  gl: WebGL2RenderingContext\n\n  canvasSize: [number, number] = [0, 0]\n\n  renderer: WebGL2Renderer\n\n  private resizeObserver: ResizeObserver\n\n  /**\n   * Creates a WarpedMapLayer instance\n   * @param options - the WebGL2 renderer options\n   */\n  constructor(options?: Partial<OpenLayersWarpedMapLayerOptions>) {\n    super({})\n\n    const container = document.createElement('div')\n    this.container = container\n\n    container.style.position = 'absolute'\n    container.style.width = '100%'\n    container.style.height = '100%'\n    container.classList.add('ol-layer')\n    container.classList.add('allmaps-warped-map-layer')\n    const canvas = document.createElement('canvas')\n\n    canvas.style.position = 'absolute'\n    canvas.style.left = '0'\n\n    canvas.style.width = '100%'\n    canvas.style.height = '100%'\n\n    container.appendChild(canvas)\n\n    const gl = canvas.getContext('webgl2', {\n      premultipliedAlpha: true\n    })\n\n    if (!gl) {\n      throw new Error('WebGL 2 not available')\n    }\n\n    this.resizeObserver = new ResizeObserver(this.resized.bind(this))\n    this.resizeObserver.observe(canvas, { box: 'content-box' })\n\n    this.canvas = canvas\n    this.gl = gl\n\n    this.renderer = new WebGL2Renderer(this.gl, options)\n\n    this.addEventListeners()\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns - the map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    const results =\n      await this.renderer.warpedMapList.addGeoreferenceAnnotation(annotation)\n    this.changed()\n\n    return results\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/).\n   * @param annotation - Georeference Annotation\n   * @returns - the map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotation(\n    annotation: unknown\n  ): Promise<(string | Error)[]> {\n    const results =\n      await this.renderer.warpedMapList.removeGeoreferenceAnnotation(annotation)\n    this.changed()\n\n    return results\n  }\n\n  /**\n   * Adds a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns - the map IDs of the maps that were added, or an error per map\n   */\n  async addGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n    const results = this.addGeoreferenceAnnotation(annotation)\n\n    return results\n  }\n\n  /**\n   * Removes a [Georeference Annotation](https://iiif.io/api/extension/georef/) by URL.\n   * @param annotationUrl - Georeference Annotation\n   * @returns - the map IDs of the maps that were removed, or an error per map\n   */\n  async removeGeoreferenceAnnotationByUrl(\n    annotationUrl: string\n  ): Promise<(string | Error)[]> {\n    const annotation = await fetch(annotationUrl).then((response) =>\n      response.json()\n    )\n    const results = this.removeGeoreferenceAnnotation(annotation)\n\n    return results\n  }\n\n  /**\n   * Adds a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns - the map ID of the map that was added, or an error\n   */\n  async addGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    const result =\n      this.renderer.warpedMapList.addGeoreferencedMap(georeferencedMap)\n    this.changed()\n\n    return result\n  }\n\n  /**\n   * Removes a Georeferenced map.\n   * @param georeferencedMap - Georeferenced map\n   * @returns - the map ID of the map that was remvoed, or an error\n   */\n  async removeGeoreferencedMap(\n    georeferencedMap: unknown\n  ): Promise<string | Error> {\n    const result =\n      this.renderer.warpedMapList.removeGeoreferencedMap(georeferencedMap)\n    this.changed()\n\n    return result\n  }\n\n  /**\n   * Returns the WarpedMapList object that contains a list of the warped maps of all loaded maps\n   * @returns the warped map list\n   */\n  getWarpedMapList(): WarpedMapList<WebGL2WarpedMap> {\n    return this.renderer.warpedMapList\n  }\n\n  /**\n   * Returns a single map's warped map\n   * @param mapId - ID of the map\n   * @returns the warped map\n   */\n  getWarpedMap(mapId: string): WebGL2WarpedMap | undefined {\n    return this.renderer.warpedMapList.getWarpedMap(mapId)\n  }\n\n  /**\n   * Make a single map visible\n   * @param mapId - ID of the map\n   */\n  showMap(mapId: string) {\n    this.renderer.warpedMapList.showMaps([mapId])\n    this.changed()\n  }\n\n  /**\n   * Make multiple maps visible\n   * @param mapIds - IDs of the maps\n   */\n  showMaps(mapIds: Iterable<string>) {\n    this.renderer.warpedMapList.showMaps(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Make a single map invisible\n   * @param mapId - ID of the map\n   */\n  hideMap(mapId: string) {\n    this.renderer.warpedMapList.hideMaps([mapId])\n    this.changed()\n  }\n\n  /**\n   * Make multiple maps invisible\n   * @param mapIds - IDs of the maps\n   */\n  hideMaps(mapIds: Iterable<string>) {\n    this.renderer.warpedMapList.hideMaps(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Returns the visibility of a single map\n   * @returns - whether the map is visible\n   */\n  isMapVisible(mapId: string): boolean | undefined {\n    const warpedMap = this.renderer.warpedMapList.getWarpedMap(mapId)\n    return warpedMap?.visible\n  }\n\n  /**\n   * Sets the resource mask of a single map\n   * @param mapId - ID of the map\n   * @param resourceMask - new resource mask\n   */\n  setMapResourceMask(mapId: string, resourceMask: Ring) {\n    this.renderer.warpedMapList.setMapResourceMask(resourceMask, mapId)\n    this.changed()\n  }\n\n  /**\n   * Sets the GCOs of a single map\n   * @param mapId - ID of the map\n   * @param gcos - new GCPs\n   */\n  setMapGcps(mapId: string, gcps: Gcp[]) {\n    this.renderer.warpedMapList.setMapGcps(gcps, mapId)\n    this.changed()\n  }\n\n  /**\n   * Sets the transformation type of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param transformation - new transformation type\n   */\n  setMapsTransformationType(\n    mapIds: Iterable<string>,\n    transformation: TransformationType\n  ) {\n    this.renderer.warpedMapList.setMapsTransformationType(transformation, {\n      mapIds\n    })\n    this.changed()\n  }\n\n  /**\n   * Sets the transformation type of a single map\n   * @param mapId - ID of the map\n   * @param transformation - new transformation type\n   */\n  setMapTransformationType(mapId: string, transformation: TransformationType) {\n    this.renderer.warpedMapList.setMapTransformationType(transformation, mapId)\n    this.changed()\n  }\n\n  /**\n   * Sets the distortion measure of multiple maps\n   * @param mapIds - IDs of the maps\n   * @param distortionMeasure - new distortion measure\n   */\n  setMapsDistortionMeasure(\n    mapIds: Iterable<string>,\n    distortionMeasure?: DistortionMeasure\n  ) {\n    this.renderer.warpedMapList.setMapsDistortionMeasure(distortionMeasure, {\n      mapIds\n    })\n    this.changed()\n  }\n\n  removeGeoreferencedMapById(mapId: string) {\n    this.renderer.warpedMapList.removeGeoreferencedMapById(mapId)\n    this.changed()\n  }\n\n  /**\n   * Return the bounding box of all visible maps in the layer (inside or outside of the Viewport), in longitude/latitude coordinates.\n   * @returns - Bounding box of all warped maps\n   */\n  getLonLatExtent(): Extent | undefined {\n    return this.renderer.warpedMapList.getMapsBbox({\n      projection: { definition: 'EPSG:4326' }\n    })\n  }\n\n  /**\n   * Return the bounding box of all visible maps in the layer (inside or outside of the Viewport), in projected coordinates.\n   * @returns - bounding box of all warped maps\n   */\n  getExtent(): Extent | undefined {\n    return this.renderer.warpedMapList.getMapsBbox()\n  }\n\n  /**\n   * Bring maps to front\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsToFront(mapIds: Iterable<string>) {\n    this.renderer.warpedMapList.bringMapsToFront(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Send maps to back\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsToBack(mapIds: string[]) {\n    this.renderer.warpedMapList.sendMapsToBack(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Bring maps forward\n   * @param mapIds - IDs of the maps\n   */\n  bringMapsForward(mapIds: Iterable<string>) {\n    this.renderer.warpedMapList.bringMapsForward(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Send maps backward\n   * @param mapIds - IDs of the maps\n   */\n  sendMapsBackward(mapIds: Iterable<string>) {\n    this.renderer.warpedMapList.sendMapsBackward(mapIds)\n    this.changed()\n  }\n\n  /**\n   * Returns the z-index of a single map\n   * @param mapId - ID of the warped map\n   * @returns - z-index of the warped map\n   */\n  getMapZIndex(mapId: string): number | undefined {\n    return this.renderer.warpedMapList.getMapZIndex(mapId)\n  }\n\n  /**\n   * Sets the object that caches image information\n   * @param imageInformations - Object that caches image information\n   */\n  setImageInformations(imageInformations: ImageInformations) {\n    this.renderer.warpedMapList.setImageInformations(imageInformations)\n  }\n\n  /**\n   * Gets the HTML container element of the layer\n   * @returns HTML element\n   */\n  getContainer(): HTMLElement {\n    return this.container\n  }\n\n  /**\n   * Gets the HTML canvas element of the layer\n   * @returns HTML Canvas element\n   */\n  getCanvas(): HTMLCanvasElement | null {\n    return this.canvas\n  }\n\n  /**\n   * Sets the options\n   *\n   * @param options - Options\n   */\n  setOptions(options?: Partial<OpenLayersWarpedMapLayerOptions>) {\n    this.renderer.setOptions(options)\n  }\n\n  // No setOpacity() and getOpacity() here since default for OL Layer class\n\n  /**\n   * Gets the opacity of a single map\n   * @param mapId - ID of the map\n   * @returns Opacity of the map\n   */\n  getMapOpacity(mapId: string): number | undefined {\n    return this.renderer.getMapOpacity(mapId)\n  }\n\n  /**\n   * Sets the opacity of a single map\n   * @param mapId - ID of the map\n   * @param opacity - opacity between 0 and 1, where 0 is fully transparent and 1 is fully opaque\n   */\n  setMapOpacity(mapId: string, opacity: number) {\n    this.renderer.setMapOpacity(mapId, opacity)\n    this.changed()\n  }\n\n  /**\n   * Resets the opacity of a single map to fully opaque\n   * @param mapId - ID of the map\n   */\n  resetMapOpacity(mapId: string) {\n    this.renderer.resetMapOpacity(mapId)\n    this.changed()\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setSaturation(saturation: number) {\n    this.renderer.setSaturation(saturation)\n    this.changed()\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   */\n  resetSaturation() {\n    this.renderer.resetSaturation()\n    this.changed()\n  }\n\n  /**\n   * Sets the saturation of a single map\n   * @param mapId - ID of the map\n   * @param saturation - saturation between 0 and 1, where 0 is grayscale and 1 are the original colors\n   */\n  setMapSaturation(mapId: string, saturation: number) {\n    this.renderer.setMapSaturation(mapId, saturation)\n    this.changed()\n  }\n\n  /**\n   * Resets the saturation of a single map to the original colors\n   * @param mapId - ID of the map\n   */\n  resetMapSaturation(mapId: string) {\n    this.renderer.resetMapSaturation(mapId)\n    this.changed()\n  }\n\n  /**\n   * Removes a color from all maps\n   * @param transformOptions - remove color options\n   * @param transformOptions.hexColor - hex color to remove\n   * @param transformOptions.threshold - threshold between 0 and 1\n   * @param transformOptions.hardness - hardness between 0 and 1\n   */\n  setRemoveColor(\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setRemoveColorOptions({\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this.changed()\n  }\n\n  /**\n   * Resets the color removal for all maps\n   */\n  resetRemoveColor() {\n    this.renderer.resetRemoveColorOptions()\n    this.changed()\n  }\n\n  /**\n   * Removes a color from a single map\n   * @param mapId - ID of the map\n   * @param transformOptions - remove color options\n   * @param transformOptions.hexColor] - hex color to remove\n   * @param transformOptions.threshold] - threshold between 0 and 1\n   * @param transformOptions.hardness] - hardness between 0 and 1\n   */\n  setMapRemoveColor(\n    mapId: string,\n    options: Partial<{ hexColor: string; threshold: number; hardness: number }>\n  ) {\n    const color = options.hexColor\n      ? hexToFractionalRgb(options.hexColor)\n      : undefined\n\n    this.renderer.setMapRemoveColorOptions(mapId, {\n      color,\n      threshold: options.threshold,\n      hardness: options.hardness\n    })\n    this.changed()\n  }\n\n  /**\n   * Resets the color for a single map\n   * @param mapId - ID of the map\n   */\n  resetMapRemoveColor(mapId: string) {\n    this.renderer.resetMapRemoveColorOptions(mapId)\n  }\n\n  /**\n   * Sets the colorization for all maps\n   * @param hexColor - desired hex color\n   */\n  setColorize(hexColor: string) {\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setColorizeOptions({ color })\n      this.changed()\n    }\n  }\n\n  /**\n   * Resets the colorization for all maps\n   */\n  resetColorize() {\n    this.renderer.resetColorizeOptions()\n    this.changed()\n  }\n\n  /**\n   * Sets the colorization for a single mapID of the map\n   * @param mapId - ID of the map\n   * @param hexColor - desired hex color\n   */\n  setMapColorize(mapId: string, hexColor: string) {\n    const color = hexToFractionalRgb(hexColor)\n    if (color) {\n      this.renderer.setMapColorizeOptions(mapId, { color })\n      this.changed()\n    }\n  }\n\n  /**\n   * Resets the colorization of a single map\n   * @param mapId - ID of the map\n   */\n  resetMapColorize(mapId: string) {\n    this.renderer.resetMapColorizeOptions(mapId)\n    this.changed()\n  }\n\n  /**\n   * Sets the grid for all maps\n   * @param enabled - whether to show the grid\n   */\n  setGrid(enabled: boolean) {\n    this.renderer.setGridOptions({ enabled })\n    this.changed()\n  }\n\n  /**\n   * Resets the grid for all maps\n   */\n  resetGrid() {\n    this.renderer.resetGridOptions()\n    this.changed()\n  }\n\n  /**\n   * Sets the grid for a single mapID of the map\n   * @param mapId - ID of the map\n   * @param enabled - whether to show the grid\n   */\n  setMapGrid(mapId: string, enabled: boolean) {\n    this.renderer.setMapGridOptions(mapId, { enabled })\n    this.changed()\n  }\n\n  /**\n   * Resets the grid of a single map\n   * @param mapId - ID of the map\n   */\n  resetMapGrid(mapId: string) {\n    this.renderer.resetMapGridOptions(mapId)\n    this.changed()\n  }\n\n  /**\n   * Disposes all WebGL resources and cached tiles\n   */\n  dispose() {\n    this.renderer.destroy()\n\n    const extension = this.gl.getExtension('WEBGL_lose_context')\n\n    if (extension) {\n      extension.loseContext()\n    }\n    const canvas = this.gl.canvas\n    canvas.width = 1\n    canvas.height = 1\n\n    this.resizeObserver.disconnect()\n\n    this.removeEventListeners()\n\n    super.disposeInternal()\n  }\n\n  /**\n   * Clears: removes all maps\n   */\n  clear() {\n    this.renderer.warpedMapList.clear()\n    this.changed()\n  }\n\n  /**\n   * Render the layer.\n   * @param frameState - OpenLayers frame state\n   * @returns The rendered element\n   */\n  render(frameState: FrameState): HTMLElement {\n    if (this.canvas) {\n      this.resizeCanvas(this.canvas, this.canvasSize)\n    }\n\n    this.renderer.setOpacity(Math.min(Math.max(this.getOpacity(), 0), 1))\n\n    const viewport = new Viewport(\n      frameState.size as [number, number],\n      frameState.viewState.center as [number, number],\n      frameState.viewState.resolution,\n      {\n        rotation: frameState.viewState.rotation,\n        devicePixelRatio: window.devicePixelRatio,\n        projection: { definition: frameState.viewState.projection.getCode() }\n        // TODO: add a way for viewport and renderer to understand other codes then the two default ones\n      }\n    )\n\n    this.renderer.render(viewport)\n\n    return this.container\n  }\n\n  private resized(entries: ResizeObserverEntry[]) {\n    // From https://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    // TODO: read + understand https://web.dev/device-pixel-content-box/\n    for (const entry of entries) {\n      const width = entry.contentRect.width\n      const height = entry.contentRect.height\n      const dpr = window.devicePixelRatio\n\n      // if (entry.devicePixelContentBoxSize) {\n      //   // NOTE: Only this path gives the correct answer\n      //   // The other paths are imperfect fallbacks\n      //   // for browsers that don't provide anyway to do this\n      //   width = entry.devicePixelContentBoxSize[0].inlineSize\n      //   height = entry.devicePixelContentBoxSize[0].blockSize\n      //   dpr = 1 // it's already in width and height\n      // } else if (entry.contentBoxSize) {\n      //   if (entry.contentBoxSize[0]) {\n      //     width = entry.contentBoxSize[0].inlineSize\n      //     height = entry.contentBoxSize[0].blockSize\n      //   }\n      // }\n\n      const displayWidth = Math.round(width * dpr)\n      const displayHeight = Math.round(height * dpr)\n\n      this.canvasSize = [displayWidth, displayHeight]\n    }\n    this.changed()\n  }\n\n  private resizeCanvas(\n    canvas: HTMLCanvasElement,\n    [width, height]: [number, number]\n  ) {\n    const needResize = canvas.width !== width || canvas.height !== height\n\n    if (needResize) {\n      canvas.width = width\n      canvas.height = height\n    }\n\n    return needResize\n  }\n\n  private contextLost(event: Event) {\n    event.preventDefault()\n    this.renderer.contextLost()\n  }\n\n  private contextRestored(event: Event) {\n    event.preventDefault()\n    this.renderer.contextRestored()\n  }\n\n  private addEventListeners() {\n    this.canvas.addEventListener(\n      'webglcontextlost',\n      this.contextLost.bind(this)\n    )\n\n    this.canvas.addEventListener(\n      'webglcontextrestored',\n      this.contextRestored.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.CHANGED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.addEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.addEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.GEOREFERENCEANNOTATIONADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.warpedMapList.addEventListener(\n      WarpedMapEventType.CLEARED,\n      this.changed.bind(this)\n    )\n  }\n\n  private removeEventListeners() {\n    this.canvas.removeEventListener(\n      'webglcontextlost',\n      this.contextLost.bind(this)\n    )\n\n    this.canvas.removeEventListener(\n      'webglcontextrestored',\n      this.contextRestored.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.CHANGED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPENTER,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.removeEventListener(\n      WarpedMapEventType.WARPEDMAPLEAVE,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.FIRSTMAPTILELOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.tileCache.removeEventListener(\n      WarpedMapEventType.ALLREQUESTEDTILESLOADED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.GEOREFERENCEANNOTATIONADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.passWarpedMapEvent.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.VISIBILITYCHANGED,\n      this.changed.bind(this)\n    )\n\n    this.renderer.warpedMapList.removeEventListener(\n      WarpedMapEventType.CLEARED,\n      this.changed.bind(this)\n    )\n  }\n\n  private passWarpedMapEvent(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const olEvent = new OLWarpedMapEvent(event.type, event.data)\n      this.dispatchEvent(olEvent)\n    }\n  }\n}\n"],"names":[],"mappings":"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"}