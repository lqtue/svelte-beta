import { z } from 'zod';
import { CanvasSchema } from '../schemas/iiif.js';
import { EmbeddedImage, Image } from './image.js';
import type { LanguageString, Metadata, NavDate, NavPlace, Thumbnail, SeeAlso, RequiredStatement, Summary, Annotations, Homepage, Rendering } from '../lib/types.js';
type CanvasType = z.infer<typeof CanvasSchema>;
declare const CanvasTypeString = "canvas";
/**
 * Parsed IIIF Canvas
 *
 * @property uri - URI of Canvas
 * @property label - Label of Manifest
 * @property metadata - Metadata of Manifest
 * @property image - Image of painted on Canvas
 * @property height - Height of Canvas
 * @property width - Width of Canvas
 * @property type - Resource type, equals 'canvas'
 */
export declare class Canvas {
    uri: string;
    type: typeof CanvasTypeString;
    height: number;
    width: number;
    image: EmbeddedImage | Image;
    label?: LanguageString;
    description?: LanguageString;
    metadata?: Metadata;
    navDate?: NavDate;
    navPlace?: NavPlace;
    homepage?: Homepage;
    thumbnail?: Thumbnail;
    rendering?: Rendering;
    seeAlso?: SeeAlso;
    summary?: Summary;
    requiredStatement?: RequiredStatement;
    annotations?: Annotations;
    constructor(parsedCanvas: CanvasType);
}
export {};
