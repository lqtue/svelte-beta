import { z } from 'zod';
export declare const GCPSchema: z.ZodObject<{
    image: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
    world: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
}, "strip", z.ZodTypeAny, {
    image: [number, number];
    world: [number, number];
}, {
    image: [number, number];
    world: [number, number];
}>;
export declare const ImageSchema: z.ZodObject<{
    uri: z.ZodString;
    width: z.ZodNumber;
    height: z.ZodNumber;
    type: z.ZodEnum<["ImageService1", "ImageService2", "ImageService3"]>;
}, "strip", z.ZodTypeAny, {
    type: "ImageService1" | "ImageService2" | "ImageService3";
    height: number;
    width: number;
    uri: string;
}, {
    type: "ImageService1" | "ImageService2" | "ImageService3";
    height: number;
    width: number;
    uri: string;
}>;
export declare const GeoreferencedMapSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    version: z.ZodDefault<z.ZodNumber>;
    image: z.ZodObject<{
        uri: z.ZodString;
        width: z.ZodNumber;
        height: z.ZodNumber;
        type: z.ZodEnum<["ImageService1", "ImageService2", "ImageService3"]>;
    }, "strip", z.ZodTypeAny, {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    }, {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    }>;
    gcps: z.ZodArray<z.ZodObject<{
        image: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        world: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
    }, "strip", z.ZodTypeAny, {
        image: [number, number];
        world: [number, number];
    }, {
        image: [number, number];
        world: [number, number];
    }>, "many">;
    pixelMask: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, "many">;
    transformation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        type: z.ZodEnum<["helmert", "polynomial", "thinPlateSpline", "projective"]>;
        options: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "strip", z.ZodTypeAny, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }>, z.ZodUnknown]>, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } | undefined, unknown>>;
}, "strip", z.ZodTypeAny, {
    gcps: {
        image: [number, number];
        world: [number, number];
    }[];
    version: number;
    image: {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    };
    pixelMask: [number, number][];
    id?: string | undefined;
    transformation?: {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } | undefined;
}, {
    gcps: {
        image: [number, number];
        world: [number, number];
    }[];
    image: {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    };
    pixelMask: [number, number][];
    id?: string | undefined;
    transformation?: unknown;
    version?: number | undefined;
}>;
export declare const GeoreferencedMapsSchema: z.ZodArray<z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    version: z.ZodDefault<z.ZodNumber>;
    image: z.ZodObject<{
        uri: z.ZodString;
        width: z.ZodNumber;
        height: z.ZodNumber;
        type: z.ZodEnum<["ImageService1", "ImageService2", "ImageService3"]>;
    }, "strip", z.ZodTypeAny, {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    }, {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    }>;
    gcps: z.ZodArray<z.ZodObject<{
        image: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
        world: z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>;
    }, "strip", z.ZodTypeAny, {
        image: [number, number];
        world: [number, number];
    }, {
        image: [number, number];
        world: [number, number];
    }>, "many">;
    pixelMask: z.ZodArray<z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, "many">;
    transformation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
        type: z.ZodEnum<["helmert", "polynomial", "thinPlateSpline", "projective"]>;
        options: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "strip", z.ZodTypeAny, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    }>, z.ZodUnknown]>, {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } | undefined, unknown>>;
}, "strip", z.ZodTypeAny, {
    gcps: {
        image: [number, number];
        world: [number, number];
    }[];
    version: number;
    image: {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    };
    pixelMask: [number, number][];
    id?: string | undefined;
    transformation?: {
        type: "helmert" | "polynomial" | "thinPlateSpline" | "projective";
        options?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } | undefined;
}, {
    gcps: {
        image: [number, number];
        world: [number, number];
    }[];
    image: {
        type: "ImageService1" | "ImageService2" | "ImageService3";
        height: number;
        width: number;
        uri: string;
    };
    pixelMask: [number, number][];
    id?: string | undefined;
    transformation?: unknown;
    version?: number | undefined;
}>, "many">;
