{"version":3,"file":"Viewport.js","sources":["../../src/viewport/Viewport.ts"],"sourcesContent":["import {\n  computeBbox,\n  bboxToCenter,\n  bboxToRectangle,\n  bboxToSize,\n  sizesToScale,\n  bufferBboxByRatio,\n  scaleSize,\n  rotatePoints,\n  translatePoints,\n  sizeToResolution,\n  sizeToBbox,\n  sizeToCenter,\n  scalePoint,\n  sizeToRectangle,\n  midPoint,\n  scalePoints,\n  rotatePoint,\n  mergeOptions\n} from '@allmaps/stdlib'\nimport {\n  lonLatProjection,\n  webMercatorProjection,\n  proj4\n} from '@allmaps/project'\n\nimport {\n  composeHomogeneousTransform,\n  applyHomogeneousTransform,\n  invertHomogeneousTransform\n} from '../shared/homogeneous-transform.js'\nimport { WarpedMapList } from '../maps/WarpedMapList.js'\n\nimport type {\n  Point,\n  Rectangle,\n  Size,\n  Bbox,\n  HomogeneousTransform,\n  Fit,\n  Polygon\n} from '@allmaps/types'\n\nimport type { Projection } from '@allmaps/project'\n\nimport type { WarpedMap } from '../maps/WarpedMap.js'\nimport type { ProjectionOptions, SelectionOptions } from '../shared/types.js'\n\nexport type ViewportOptions = {\n  rotation: number\n  devicePixelRatio: number\n} & ProjectionOptions\n\nexport type ZoomOptions = {\n  zoom: number\n}\n\nexport type FitOptions = {\n  fit: Fit\n}\n\nconst defaultViewportOptions = {\n  rotation: 0,\n  devicePixelRatio: 1,\n  projection: webMercatorProjection\n} as ViewportOptions\n\nconst defaultZoomOptions = {\n  zoom: 1\n} as ZoomOptions\n\nconst defaultFitOptions = {\n  fit: 'contain'\n} as FitOptions\n\n/**\n * The viewport describes the view on the rendered map.\n * @property geoCenter - Center point of the viewport, in longitude/latitude coordinates.\n * @property geoRectangle - Rotated rectangle (possibly quadrilateral) of the viewport point, in longitude/latitude coordinates.\n * @property geoSize - Size of the viewport in longitude/latitude coordinates, as [width, height]. (This is the size of the bounding box of the rectangle, since longitude/latitude only makes sense in that case).\n * @property geoResolution - Resolution of the viewport in longitude/latitude coordinates, as width * height. (This is the size of the bounding box of the rectangle, since longitude/latitude only makes sense in that case).\n * @property geoRectangleBbox - Bounding box of the rotated rectangle of the viewport, in longitude/latitude coordinates.\n * @property projectedGeoCenter - Center point of the viewport, in projected geospatial coordinates.\n * @property projectedGeoRectangle - Rotated rectangle of the viewport point, in projected geospatial coordinates.\n * @property projectedGeoSize - Size of the viewport in projected geospatial coordinates, as [width, height]. (This is not the size of the bounding box of the rotated rectangle, but the width and hight of the rectangle).\n * @property projectedGeoResolution - Resolution of the viewport in projected geospatial coordinates, as width * height. (This is not the size of the bounding box of the rotated rectangle, but the width and hight of the rectangle).\n * @property projectedGeoRectangleBbox - Bounding box of the rotated rectangle of the viewport, in projected geospatial coordinates.\n * @property rotation - Rotation of the viewport with respect to the projected coordinate system.\n * @property projectedGeoPerViewportScale - Scale of the viewport, in projected geospatial coordinates per viewport pixel.\n * @property viewportCenter - Center point of the viewport, in viewport pixels.\n * @property viewportRectangle - Rectangle of the viewport point, in viewport pixels.\n * @property viewportSize - Size of the viewport in viewport pixels, as [width, height].\n * @property viewportResolution - Resolution of the viewport in viewport pixels, as width * height.\n * @property viewportBbox - Bounding box of the viewport, in viewport pixels.\n * @property devicePixelRatio - The devicePixelRatio of the viewport.\n * @property canvasCenter - Center point of the canvas, in canvas pixels.\n * @property canvasRectangle - Rectangle of the canvas, in canvas pixels.\n * @property canvasSize - Size of the canvas in canvas pixels (viewportSize*devicePixelRatio), as [width, height].\n * @property canvasResolution - Resolution of the canvas in canvas pixels (viewportSize*devicePixelRatio), as width * height.\n * @property canvasBbox - Bounding box of the canvas, in canvas pixels.\n * @property projectedGeoPerCanvasScale - Scale of the viewport, in projected geospatial coordinates per canvas pixel (projectedGeoPerViewportScale/devicePixelRatio).\n * @property projectedGeoToViewportHomogeneousTransform - Homogeneous Transform from projected geo coordinates to viewport pixels. Equivalent to OpenLayers coordinateToPixelTransform.\n * @property projectedGeoToCanvasHomogeneousTransform - Homogeneous Transform from projected geo coordinates to canvas pixels.\n * @property projectedGeoToClipHomogeneousTransform - Homogeneous Transform from projected geo coordinates to WebGL coordinates in the [-1, 1] range. Equivalent to OpenLayers projectionTransform.\n * @property viewportToClipHomogeneousTransform - Homogeneous Transform from viewport coordinates to WebGL coordinates in the [-1, 1] range.\n */\nexport class Viewport {\n  geoCenter: Point\n  geoRectangle: Rectangle\n  geoSize: Size\n  geoResolution: number\n  geoRectangleBbox: Bbox\n\n  projection: Projection\n\n  projectedGeoCenter: Point\n  projectedGeoRectangle: Rectangle\n  projectedGeoSize: Size\n  projectedGeoResolution: number\n  projectedGeoRectangleBbox: Bbox\n\n  rotation: number\n  projectedGeoPerViewportScale: number\n\n  viewportCenter: Point\n  viewportRectangle: Rectangle\n  viewportSize: Size\n  viewportResolution: number\n  viewportBbox: Bbox\n\n  devicePixelRatio: number\n  canvasCenter: Point\n  canvasRectangle: Rectangle\n  canvasSize: Size\n  canvasResolution: number\n  canvasBbox: Bbox\n\n  projectedGeoPerCanvasScale: number\n  projectedGeoToViewportHomogeneousTransform: HomogeneousTransform = [\n    1, 0, 0, 1, 0, 0\n  ]\n  projectedGeoToCanvasHomogeneousTransform: HomogeneousTransform = [\n    1, 0, 0, 1, 0, 0\n  ]\n  projectedGeoToClipHomogeneousTransform: HomogeneousTransform = [\n    1, 0, 0, 1, 0, 0\n  ]\n  viewportToClipHomogeneousTransform: HomogeneousTransform = [1, 0, 0, 1, 0, 0]\n\n  /**\n   * Creates a new Viewport\n   *\n   * @constructor\n   * @param viewportSize - Size of the viewport in viewport pixels, as [width, height].\n   * @param projectedGeoCenter - Center point of the viewport, in projected geospatial coordinates.\n   * @param projectedGeoPerViewportScale - Scale of the viewport, in projection coordinates per viewport pixel.\n   * @param rotation - Rotation of the viewport with respect to the projected geo coordinate system. Positive values rotate the viewport positively (i.e. counter-clockwise) w.r.t. the map in projected geospatial coordinates. This is equivalent to rotating the map negatively (i.e. clockwise) within the viewport.\n   * @param devicePixelRatio - The devicePixelRatio of the viewport.\n   * @param projection - The projection the projected coordinates are in .\n   */\n  constructor(\n    viewportSize: Size,\n    projectedGeoCenter: Point,\n    projectedGeoPerViewportScale: number,\n    partialViewportOptions?: Partial<ViewportOptions>\n  ) {\n    const viewportOptions = mergeOptions(\n      defaultViewportOptions,\n      partialViewportOptions\n    )\n\n    this.projectedGeoCenter = projectedGeoCenter\n    this.projectedGeoPerViewportScale = projectedGeoPerViewportScale\n    this.rotation = viewportOptions.rotation\n    this.viewportSize = [\n      Math.round(viewportSize[0]),\n      Math.round(viewportSize[1])\n    ] // Note: assure integer values for viewport size, so they can be stored in arrays\n    this.devicePixelRatio = viewportOptions.devicePixelRatio\n\n    this.projection = viewportOptions.projection\n\n    this.projectedGeoRectangle = this.computeProjectedGeoRectangle(\n      this.viewportSize,\n      this.projectedGeoPerViewportScale,\n      this.rotation,\n      this.projectedGeoCenter\n    )\n    this.projectedGeoRectangleBbox = computeBbox(this.projectedGeoRectangle)\n    this.projectedGeoSize = scaleSize(\n      this.viewportSize,\n      projectedGeoPerViewportScale\n    )\n    this.projectedGeoResolution = sizeToResolution(this.projectedGeoSize)\n\n    // TODO: improve this with an interpolated back-projection, resulting in a ring\n    this.geoRectangle = this.projectedGeoRectangle.map((point) => {\n      return proj4(\n        this.projection.definition,\n        lonLatProjection.definition,\n        point\n      )\n    }) as Rectangle\n    this.geoRectangleBbox = computeBbox(this.geoRectangle)\n    this.geoCenter = bboxToCenter(this.geoRectangleBbox)\n    this.geoSize = bboxToSize(this.geoRectangleBbox)\n    this.geoResolution = sizeToResolution(this.geoSize)\n\n    this.viewportResolution = sizeToResolution(this.viewportSize)\n    this.viewportCenter = sizeToCenter(this.viewportSize)\n    this.viewportBbox = sizeToBbox(this.viewportSize)\n    this.viewportRectangle = bboxToRectangle(this.viewportBbox)\n\n    this.canvasCenter = scalePoint(this.viewportCenter, this.devicePixelRatio)\n    this.canvasSize = scaleSize(this.viewportSize, this.devicePixelRatio)\n    this.canvasResolution = sizeToResolution(this.canvasSize)\n    this.canvasBbox = sizeToBbox(this.canvasSize)\n    this.canvasRectangle = bboxToRectangle(this.canvasBbox)\n\n    this.projectedGeoPerCanvasScale =\n      this.projectedGeoPerViewportScale / this.devicePixelRatio\n\n    this.projectedGeoToViewportHomogeneousTransform =\n      this.composeProjectedGeoToViewportHomogeneousTransform()\n    this.projectedGeoToCanvasHomogeneousTransform =\n      this.composeProjectedGeoToCanvasHomogeneousTransform()\n    this.projectedGeoToClipHomogeneousTransform =\n      this.composeProjectedGeoToClipHomogeneousTransform()\n    this.viewportToClipHomogeneousTransform =\n      this.composeViewportToClipHomogeneousTransform()\n  }\n\n  /**\n   * Static method that creates a Viewport from a size and maps.\n   *\n   * Optionally specify a projection, to be used both when obtaining the extent of selected warped maps in projected geospatial coordinates, as well as when create a viewport\n   *\n   * @param viewportSize - Size of the viewport in viewport pixels, as [width, height].\n   * @param warpedMapList - A WarpedMapList.\n   * @param partialExtendedViewportOptions - Optional viewport options\n   * @returns A new Viewport object.\n   */\n  static fromSizeAndMaps<W extends WarpedMap>(\n    viewportSize: Size,\n    warpedMapList: WarpedMapList<W>,\n    partialExtendedViewportOptions?: Partial<\n      ViewportOptions & ZoomOptions & FitOptions & SelectionOptions\n    >\n  ): Viewport {\n    const projectedGeoConvexHull = warpedMapList.getMapsConvexHull(\n      partialExtendedViewportOptions\n    )\n\n    if (!projectedGeoConvexHull) {\n      throw new Error(\n        'Maps have no projected convex hull. Possibly because WarpedMapList or Array is empty.'\n      )\n    }\n\n    return this.fromSizeAndProjectedGeoPolygon(\n      viewportSize,\n      [projectedGeoConvexHull],\n      partialExtendedViewportOptions\n    )\n  }\n\n  /**\n   * Static method that creates a Viewport from a size and a polygon in geospatial coordinates, i.e. lon-lat `EPSG:4326`.\n   *\n   * @static\n   * @param viewportSize - Size of the viewport in viewport pixels, as [width, height].\n   * @param geoPolygon - A polygon in geospatial coordinates.\n   * @param partialExtendedViewportOptions - Optional viewport options\n   * @returns A new Viewport object.\n   */\n  static fromSizeAndGeoPolygon(\n    viewportSize: Size,\n    geoPolygon: Polygon,\n    partialExtendedViewportOptions?: Partial<\n      ViewportOptions & ZoomOptions & FitOptions\n    >\n  ): Viewport {\n    const extendedViewportOptions = mergeOptions(\n      {\n        ...defaultViewportOptions,\n        ...defaultZoomOptions,\n        ...defaultFitOptions\n      },\n      partialExtendedViewportOptions\n    )\n\n    const projectedGeoPolygon = geoPolygon.map((ring) =>\n      ring.map((point) =>\n        proj4(extendedViewportOptions.projection.definition, point)\n      )\n    )\n\n    return this.fromSizeAndProjectedGeoPolygon(\n      viewportSize,\n      projectedGeoPolygon,\n      partialExtendedViewportOptions\n    )\n  }\n\n  /**\n   * Static method that creates a Viewport from a size and a polygon in projected geospatial coordinates.\n   *\n   * @static\n   * @param viewportSize - Size of the viewport in viewport pixels, as [width, height].\n   * @param projectedGeoPolygon - A polygon in projected geospatial coordinates.\n   * @param partialExtendedViewportOptions - Optional viewport options\n   * @returns A new Viewport object.\n   */\n  static fromSizeAndProjectedGeoPolygon(\n    viewportSize: Size,\n    projectedGeoPolygon: Polygon,\n    partialExtendedViewportOptions?: Partial<\n      ViewportOptions & ZoomOptions & FitOptions\n    >\n  ): Viewport {\n    const extendedViewportOptions = mergeOptions(\n      {\n        ...defaultViewportOptions,\n        ...defaultZoomOptions,\n        ...defaultFitOptions\n      },\n      partialExtendedViewportOptions\n    )\n\n    const projectedGeoRing = projectedGeoPolygon[0]\n    const rotatedProjectedGeoRing = rotatePoints(\n      projectedGeoRing,\n      -extendedViewportOptions.rotation\n    )\n    const rotatedProjectedGeoBbox = computeBbox(rotatedProjectedGeoRing)\n    const rotatedProjectedGeoSize = bboxToSize(rotatedProjectedGeoBbox)\n    const rotatedProjectedGeoCenter = bboxToCenter(rotatedProjectedGeoBbox)\n    const projectedGeoPerViewportScale = sizesToScale(\n      rotatedProjectedGeoSize,\n      viewportSize,\n      extendedViewportOptions.fit\n    )\n\n    const projectedGeoCenter = rotatePoint(\n      rotatedProjectedGeoCenter,\n      extendedViewportOptions.rotation\n    )\n\n    return new Viewport(\n      viewportSize,\n      projectedGeoCenter,\n      projectedGeoPerViewportScale * extendedViewportOptions.zoom,\n      extendedViewportOptions\n    )\n  }\n\n  /**\n   * Static method that creates a Viewport from a scale and maps.\n   *\n   * Optionally specify a projection, to be used both when obtaining the extent of selected warped maps in projected geospatial coordinates, as well as when create a viewport\n   *\n   * @param projectedGeoPerViewportScale - Scale of the viewport, in projected geospatial coordinates per viewport pixel.\n   * @param warpedMapList - A WarpedMapList.\n   * @param partialExtendedViewportOptions - Optional viewport options.\n   * @returns A new Viewport object.\n   */\n  static fromScaleAndMaps<W extends WarpedMap>(\n    projectedGeoPerViewportScale: number,\n    warpedMapList: WarpedMapList<W>,\n    partialExtendedViewportOptions?: Partial<\n      ViewportOptions & ZoomOptions & SelectionOptions\n    >\n  ): Viewport {\n    const projectedGeoConvexHull = warpedMapList.getMapsConvexHull(\n      partialExtendedViewportOptions\n    )\n\n    if (!projectedGeoConvexHull) {\n      throw new Error(\n        'Maps have no projected convex hull. Possibly because WarpedMapList or Array is empty.'\n      )\n    }\n\n    return this.fromScaleAndProjectedGeoPolygon(\n      projectedGeoPerViewportScale,\n      [projectedGeoConvexHull],\n      partialExtendedViewportOptions\n    )\n  }\n\n  /**\n   * Static method that creates a Viewport from a scale and a polygon in geospatial coordinates, i.e. lon-lat `EPSG:4326`.\n   *\n   * Note: the scale is still in *projected* geospatial per viewport pixel!\n   *\n   * @param projectedGeoPerViewportScale - Scale of the viewport, in projected geospatial coordinates per viewport pixel.\n   * @param geoPolygon - A polygon in geospatial coordinates.\n   * @param partialViewportOptions - Optional viewport options.\n   * @returns A new Viewport object.\n   */\n  static fromScaleAndGeoPolygon(\n    projectedGeoPerViewportScale: number,\n    geoPolygon: Polygon,\n    partialExtendedViewportOptions?: Partial<ViewportOptions & ZoomOptions>\n  ): Viewport {\n    const extendedViewportOptions = mergeOptions(\n      {\n        ...defaultViewportOptions,\n        ...defaultZoomOptions,\n        ...defaultFitOptions\n      },\n      partialExtendedViewportOptions\n    )\n\n    const projectedGeoPolygon = geoPolygon.map((ring) =>\n      ring.map((point) =>\n        proj4(extendedViewportOptions.projection.definition, point)\n      )\n    )\n\n    return this.fromScaleAndProjectedGeoPolygon(\n      projectedGeoPerViewportScale,\n      projectedGeoPolygon,\n      partialExtendedViewportOptions\n    )\n  }\n\n  /**\n   * Static method that creates a Viewport from a scale and a polygon in projected geospatial coordinates.\n   *\n   * @param projectedGeoPerViewportScale - Scale of the viewport, in projected geospatial coordinates per viewport pixel.\n   * @param projectedGeoPolygon - A polygon in projected geospatial coordinates.\n   * @param partialViewportOptions - Optional viewport options.\n   * @returns A new Viewport object.\n   */\n  static fromScaleAndProjectedGeoPolygon(\n    projectedGeoPerViewportScale: number,\n    projectedGeoPolygon: Polygon,\n    partialExtendedViewportOptions?: Partial<ViewportOptions & ZoomOptions>\n  ): Viewport {\n    const extendedViewportOptions = mergeOptions(\n      {\n        ...defaultViewportOptions,\n        ...defaultZoomOptions\n      },\n      partialExtendedViewportOptions\n    )\n\n    const projectedGeoRing = projectedGeoPolygon[0]\n    const viewportRing = scalePoints(\n      rotatePoints(projectedGeoRing, -extendedViewportOptions.rotation),\n      1 / projectedGeoPerViewportScale\n    )\n    const viewportBbox = computeBbox(viewportRing)\n    const viewportSize = bboxToSize(viewportBbox)\n    const viewportCenter = bboxToCenter(viewportBbox)\n    const projectedGeoCenter = rotatePoint(\n      scalePoint(viewportCenter, projectedGeoPerViewportScale),\n      extendedViewportOptions.rotation\n    )\n\n    return new Viewport(\n      viewportSize,\n      projectedGeoCenter,\n      projectedGeoPerViewportScale * extendedViewportOptions.zoom,\n      extendedViewportOptions\n    )\n  }\n\n  getProjectedGeoBufferedRectangle(bufferFraction: number): Rectangle {\n    const viewportBufferedBbox = bufferBboxByRatio(\n      this.viewportBbox,\n      bufferFraction\n    )\n    const viewportBufferedRectangle = bboxToRectangle(viewportBufferedBbox)\n    return viewportBufferedRectangle.map((point) =>\n      applyHomogeneousTransform(\n        invertHomogeneousTransform(\n          this.projectedGeoToViewportHomogeneousTransform\n        ),\n        point\n      )\n    ) as Rectangle\n  }\n\n  private composeProjectedGeoToViewportHomogeneousTransform(): HomogeneousTransform {\n    return composeHomogeneousTransform(\n      this.viewportCenter[0],\n      this.viewportCenter[1],\n      1 / this.projectedGeoPerViewportScale,\n      -1 / this.projectedGeoPerViewportScale, // '-' for handedness\n      -this.rotation,\n      -this.projectedGeoCenter[0],\n      -this.projectedGeoCenter[1]\n    )\n  }\n\n  private composeProjectedGeoToCanvasHomogeneousTransform(): HomogeneousTransform {\n    return composeHomogeneousTransform(\n      this.canvasCenter[0],\n      this.canvasCenter[1],\n      1 / this.projectedGeoPerCanvasScale,\n      -1 / this.projectedGeoPerCanvasScale, // '-' for handedness\n      -this.rotation,\n      -this.projectedGeoCenter[0],\n      -this.projectedGeoCenter[1]\n    )\n  }\n\n  private composeProjectedGeoToClipHomogeneousTransform(): HomogeneousTransform {\n    return composeHomogeneousTransform(\n      0,\n      0,\n      2 / (this.projectedGeoPerViewportScale * this.viewportSize[0]),\n      2 / (this.projectedGeoPerViewportScale * this.viewportSize[1]),\n      -this.rotation,\n      -this.projectedGeoCenter[0],\n      -this.projectedGeoCenter[1]\n    )\n  }\n\n  private composeViewportToClipHomogeneousTransform(): HomogeneousTransform {\n    return composeHomogeneousTransform(\n      0,\n      0,\n      2 / this.viewportSize[0],\n      -2 / this.viewportSize[1], // '-' for handedness\n      0,\n      -this.viewportCenter[0],\n      -this.viewportCenter[1]\n    )\n  }\n\n  /**\n   * Returns a rectangle in projected geospatial coordinates\n   *\n   * The rectangle is the result of a horizontal rectangle in Viewport space of size 'viewportSize',\n   * scaled using projectedGeoPerViewportScale, centered,\n   * rotated using 'rotation' and translated to 'projectedGeoCenter'.\n   *\n   * @private\n   * @param viewportSize\n   * @param projectedGeoPerViewportScale\n   * @param rotation\n   * @param projectedGeoCenter\n   */\n  private computeProjectedGeoRectangle(\n    viewportSize: Size,\n    projectedGeoPerViewportScale: number,\n    rotation: number,\n    projectedGeoCenter: Point\n  ): Rectangle {\n    const scaled = scaleSize(viewportSize, projectedGeoPerViewportScale)\n    const rectangle = sizeToRectangle(scaled)\n    const centered = translatePoints(\n      rectangle,\n      midPoint(...rectangle),\n      'substract'\n    ) as Rectangle\n    const rotated = rotatePoints(centered, rotation) as Rectangle\n    const translated = translatePoints(rotated, projectedGeoCenter) as Rectangle\n\n    return translated\n  }\n}\n"],"names":[],"mappings":"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"}