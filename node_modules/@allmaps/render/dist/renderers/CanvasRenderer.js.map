{"version":3,"file":"CanvasRenderer.js","sources":["../../src/renderers/CanvasRenderer.ts"],"sourcesContent":["import { BaseRenderer } from './BaseRenderer.js'\nimport { CacheableImageDataTile } from '../tilecache/CacheableImageDataTile.js'\nimport { createWarpedMapFactory } from '../maps/WarpedMap.js'\nimport { Viewport } from '../viewport/Viewport.js'\n\nimport { renderToIntArray } from '../shared/render-to-int-array.js'\nimport type { Renderer, CanvasRendererOptions } from '../shared/types.js'\nimport type { WarpedMap } from '../maps/WarpedMap.js'\n\nimport type { Size } from '@allmaps/types'\n\n/**\n * Class that renders WarpedMaps to a HTML Canvas element with the Canvas 2D API\n */\nexport class CanvasRenderer\n  extends BaseRenderer<WarpedMap, ImageData>\n  implements Renderer\n{\n  canvas: HTMLCanvasElement\n  context: CanvasRenderingContext2D\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    options?: Partial<CanvasRendererOptions>\n  ) {\n    super(\n      CacheableImageDataTile.createFactory(),\n      createWarpedMapFactory(),\n      options\n    )\n\n    this.canvas = canvas\n    this.context = canvas.getContext('2d') as CanvasRenderingContext2D\n  }\n\n  /**\n   * Render the map for a given viewport.\n   *\n   * If no viewport is specified, a viewport is deduced based on the WarpedMapList and canvas width and hight.\n   *\n   * @param viewport - the viewport to render\n   */\n  async render(viewport?: Viewport): Promise<void> {\n    this.viewport =\n      viewport ||\n      Viewport.fromSizeAndMaps(\n        [this.canvas.width, this.canvas.height],\n        this.warpedMapList\n      )\n\n    await Promise.allSettled(this.loadMissingImageInfosInViewport())\n\n    this.assureProjection()\n\n    this.requestFetchableTiles()\n    await this.tileCache.allRequestedTilesLoaded()\n\n    const imageData = new ImageData(\n      this.viewport.canvasSize[0],\n      this.viewport.canvasSize[1]\n    )\n\n    await renderToIntArray(\n      this.warpedMapList,\n      this.tileCache,\n      this.viewport,\n      this.getTileImageData,\n      this.getTileSize,\n      imageData.data\n    )\n\n    this.context.putImageData(imageData, 0, 0)\n  }\n\n  private getTileImageData(data: ImageData, index: number): number {\n    return data.data[index]\n  }\n\n  private getTileSize(data: ImageData): Size {\n    return [data.width, data.height]\n  }\n}\n"],"names":[],"mappings":";;;;;AAcO,MAAM,uBACH,aAEV;AAAA,EACE;AAAA,EACA;AAAA,EAEA,YACE,QACA,SACA;AACA;AAAA,MACE,uBAAuB,cAAA;AAAA,MACvB,uBAAA;AAAA,MACA;AAAA,IAAA;AAGF,SAAK,SAAS;AACd,SAAK,UAAU,OAAO,WAAW,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OAAO,UAAoC;AAC/C,SAAK,WACH,YACA,SAAS;AAAA,MACP,CAAC,KAAK,OAAO,OAAO,KAAK,OAAO,MAAM;AAAA,MACtC,KAAK;AAAA,IAAA;AAGT,UAAM,QAAQ,WAAW,KAAK,gCAAA,CAAiC;AAE/D,SAAK,iBAAA;AAEL,SAAK,sBAAA;AACL,UAAM,KAAK,UAAU,wBAAA;AAErB,UAAM,YAAY,IAAI;AAAA,MACpB,KAAK,SAAS,WAAW,CAAC;AAAA,MAC1B,KAAK,SAAS,WAAW,CAAC;AAAA,IAAA;AAG5B,UAAM;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,UAAU;AAAA,IAAA;AAGZ,SAAK,QAAQ,aAAa,WAAW,GAAG,CAAC;AAAA,EAC3C;AAAA,EAEQ,iBAAiB,MAAiB,OAAuB;AAC/D,WAAO,KAAK,KAAK,KAAK;AAAA,EACxB;AAAA,EAEQ,YAAY,MAAuB;AACzC,WAAO,CAAC,KAAK,OAAO,KAAK,MAAM;AAAA,EACjC;AACF;"}