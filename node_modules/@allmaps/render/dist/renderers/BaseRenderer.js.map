{"version":3,"file":"BaseRenderer.js","sources":["../../src/renderers/BaseRenderer.ts"],"sourcesContent":["import { TileCache } from '../tilecache/TileCache.js'\nimport { WarpedMapList } from '../maps/WarpedMapList.js'\nimport { FetchableTile } from '../tilecache/FetchableTile.js'\n\nimport { WarpedMapEvent, WarpedMapEventType } from '../shared/events.js'\nimport {\n  getTileZoomLevelForScale,\n  computeTilesCoveringRingAtTileZoomLevel,\n  getTilesResolution,\n  getTilesAtScaleFactor,\n  getTileZoomLevelResolution,\n  squaredDistanceTileToPoint\n} from '../shared/tiles.js'\n\nimport {\n  bboxToCenter,\n  computeBbox,\n  squaredDistance,\n  intersectBboxes,\n  bboxToRectangle,\n  mergeOptions\n} from '@allmaps/stdlib'\nimport { lonLatProjection, proj4 } from '@allmaps/project'\n\nimport type { Viewport } from '../viewport/Viewport.js'\nimport type { WarpedMap } from '../maps/WarpedMap.js'\nimport type {\n  CachableTileFactory,\n  WarpedMapFactory,\n  BaseRendererOptions,\n  MapPruneInfo\n} from '../shared/types.js'\n\n// TODO: move defaults for tunable options here\nconst defaultBaseRendererOptions = {}\n\n// These buffers should be in growing order\nconst REQUEST_VIEWPORT_BUFFER_RATIO = 0\nconst OVERVIEW_REQUEST_VIEWPORT_BUFFER_RATIO = 2\nconst PRUNE_VIEWPORT_BUFFER_RATIO = 4\nconst OVERVIEW_PRUNE_VIEWPORT_BUFFER_RATIO = 10\n\n/**\n * 0 = no correction, -1 = shaper, +1 = less sharp\n * Normal has more effect on smaller scale factors\n * Log2 (i.e. per zoomlevel) has equal effect all scale factors\n */\nconst SCALE_FACTOR_CORRECTION = 0\nconst LOG2_SCALE_FACTOR_CORRECTION = 0.4\n\nconst MAX_MAP_OVERVIEW_RESOLUTION = 1024 * 1024 // Support one 1024 * 1024 overview tile, e.g. for Rotterdam map.\nconst MAX_TOTAL_RESOLUTION_RATIO = 10\n\nconst MAX_GCPS_EXACT_TPS_TO_RESOURCE = 100\n\n/**\n * Abstract base class for renderers\n */\nexport abstract class BaseRenderer<W extends WarpedMap, D> extends EventTarget {\n  partialBaseRendererOptions: Partial<BaseRendererOptions>\n\n  warpedMapList: WarpedMapList<W>\n  tileCache: TileCache<D>\n\n  mapsInPreviousViewport: Set<string> = new Set()\n  mapsInViewport: Set<string> = new Set()\n  mapsWithRequestedTilesForViewport: Set<string> = new Set()\n  protected viewport: Viewport | undefined\n\n  constructor(\n    cachableTileFactory: CachableTileFactory<D>,\n    warpedMapFactory: WarpedMapFactory<W>,\n    partialBaseRendererOptions?: Partial<BaseRendererOptions>\n  ) {\n    super()\n\n    this.partialBaseRendererOptions = mergeOptions(\n      defaultBaseRendererOptions,\n      partialBaseRendererOptions\n    )\n\n    this.tileCache = new TileCache(\n      cachableTileFactory,\n      partialBaseRendererOptions\n    )\n    this.warpedMapList = new WarpedMapList(\n      warpedMapFactory,\n      partialBaseRendererOptions\n    )\n  }\n\n  /**\n   * Parses an annotation and adds its georeferenced map to this renderer's warped map list\n   *\n   * @param annotation\n   * @returns\n   */\n  async addGeoreferenceAnnotation(annotation: unknown) {\n    return this.warpedMapList.addGeoreferenceAnnotation(annotation)\n  }\n\n  /**\n   * Adds a georeferenced map to this renderer's warped map list\n   *\n   * @param georeferencedMap\n   * @returns\n   */\n  async addGeoreferencedMap(georeferencedMap: unknown) {\n    return this.warpedMapList.addGeoreferencedMap(georeferencedMap)\n  }\n\n  /**\n   * Set the Base Renderer options\n   *\n   * @param partialBaseRendererOptions - Options\n   */\n  setOptions(partialBaseRendererOptions?: Partial<BaseRendererOptions>): void {\n    this.partialBaseRendererOptions = mergeOptions(\n      this.partialBaseRendererOptions,\n      partialBaseRendererOptions\n    )\n    this.tileCache.setOptions(partialBaseRendererOptions)\n    this.warpedMapList.setOptions(partialBaseRendererOptions)\n  }\n\n  protected loadMissingImageInfosInViewport(): Promise<void>[] {\n    if (!this.viewport) {\n      return []\n    }\n\n    return Array.from(\n      this.warpedMapList.getWarpedMaps({\n        geoBbox: this.viewport.geoRectangleBbox\n      })\n    )\n      .filter(\n        (warpedMap) => !warpedMap.hasImageInfo() && !warpedMap.loadingImageInfo\n      )\n      .map((warpedMap) => warpedMap.loadImageInfo())\n  }\n\n  protected someImageInfosInViewport(): boolean {\n    if (!this.viewport) {\n      return false\n    }\n\n    // Note: this must be the largest buffer\n    // to make sure prune info is made and maps are pruned\n    return Array.from(\n      this.findMapsInViewport(\n        this.shouldAnticipateInteraction()\n          ? OVERVIEW_PRUNE_VIEWPORT_BUFFER_RATIO\n          : 0\n      )\n    )\n      .map((mapId) => this.warpedMapList.getWarpedMap(mapId) as WarpedMap)\n      .map((warpedMap) => warpedMap.hasImageInfo())\n      .some(Boolean)\n  }\n\n  protected shouldRequestFetchableTiles() {\n    return true\n  }\n\n  // Should we anticipate user interaction (panning or zooming)\n  // and hence buffer the viewport or get overview tiles\n  protected shouldAnticipateInteraction() {\n    return false\n  }\n\n  protected assureProjection() {\n    if (!this.viewport) {\n      return\n    }\n\n    this.warpedMapList.partialWarpedMapListOptions.projection =\n      this.viewport.projection\n    this.warpedMapList.setMapsProjection(this.viewport.projection, {\n      onlyVisible: false\n    })\n  }\n\n  protected requestFetchableTiles(): void {\n    if (!this.shouldRequestFetchableTiles()) {\n      return\n    }\n\n    const fetchableTilesForViewport: FetchableTile[] = []\n    const overviewFetchableTilesForViewport: FetchableTile[] = []\n\n    const mapsInViewportForRequest = this.findMapsInViewport(\n      this.shouldAnticipateInteraction() ? REQUEST_VIEWPORT_BUFFER_RATIO : 0\n    )\n    const mapsInViewportForOverviewRequest = this.findMapsInViewport(\n      this.shouldAnticipateInteraction()\n        ? OVERVIEW_REQUEST_VIEWPORT_BUFFER_RATIO\n        : 0\n    )\n    const mapsInViewportForPrune = this.findMapsInViewport(\n      this.shouldAnticipateInteraction() ? PRUNE_VIEWPORT_BUFFER_RATIO : 0\n    )\n    const mapsInViewportForOverviewPrune = this.findMapsInViewport(\n      this.shouldAnticipateInteraction()\n        ? OVERVIEW_PRUNE_VIEWPORT_BUFFER_RATIO\n        : 0\n    )\n\n    // For all maps, reset properties for the current viewport: the (overview) zoomlevels, resource viewport ring and fetchable tiles\n    for (const warpedMap of this.warpedMapList.getWarpedMaps()) {\n      warpedMap.resetForViewport()\n    }\n\n    // Get fetchable tiles for all maps in viewport with request buffer\n    // (and set properties for the current viewport for all maps in viewport with prune buffer)\n    for (const mapId of mapsInViewportForPrune) {\n      fetchableTilesForViewport.push(\n        ...this.getMapFetchableTilesForViewport(mapId, mapsInViewportForRequest)\n      )\n    }\n\n    // Get overview fetchable tiles for all maps in viewport with overview buffer\n    // (and set properties for the current viewport for all maps in viewport with prune buffer)\n    if (this.shouldAnticipateInteraction()) {\n      for (const mapId of mapsInViewportForOverviewPrune) {\n        overviewFetchableTilesForViewport.push(\n          ...this.getMapOverviewFetchableTilesForViewport(\n            mapId,\n            [\n              ...fetchableTilesForViewport,\n              ...overviewFetchableTilesForViewport\n            ],\n            mapsInViewportForOverviewRequest\n          )\n        )\n      }\n    }\n\n    // Request all those fetchable tiles\n    this.tileCache.requestFetchableTiles([\n      ...fetchableTilesForViewport,\n      ...overviewFetchableTilesForViewport\n    ])\n\n    this.updateMapsForViewport([\n      ...fetchableTilesForViewport,\n      ...overviewFetchableTilesForViewport\n    ])\n    this.pruneTileCache(mapsInViewportForOverviewPrune)\n  }\n\n  protected findMapsInViewport(viewportBufferRatio = 0): Set<string> {\n    if (!this.viewport) {\n      return new Set()\n    }\n    const viewport = this.viewport\n\n    const projectedGeoBufferedRectangle =\n      this.viewport.getProjectedGeoBufferedRectangle(viewportBufferRatio)\n    const geoBufferedRectangleBbox = computeBbox(\n      projectedGeoBufferedRectangle.map((point) =>\n        proj4(\n          viewport.projection.definition,\n          lonLatProjection.definition,\n          point\n        )\n      )\n    )\n\n    return new Set(\n      Array.from(\n        this.warpedMapList.getWarpedMaps({ geoBbox: geoBufferedRectangleBbox })\n      )\n        .sort((warpedMapA, warpedMapB) => {\n          if (warpedMapA && warpedMapB) {\n            return (\n              squaredDistance(\n                bboxToCenter(warpedMapA.projectedGeoMaskBbox),\n                viewport.projectedGeoCenter\n              ) -\n              squaredDistance(\n                bboxToCenter(warpedMapB.projectedGeoMaskBbox),\n                viewport.projectedGeoCenter\n              )\n            )\n          } else {\n            return 0\n          }\n        })\n        .map((warpedMap) => warpedMap.mapId)\n    )\n  }\n\n  protected getMapFetchableTilesForViewport(\n    mapId: string,\n    mapsInViewportForRequest: Set<string>\n  ): FetchableTile[] {\n    if (!this.viewport) {\n      return []\n    }\n    const viewport = this.viewport\n\n    const warpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n    if (!warpedMap) {\n      return []\n    }\n\n    if (!warpedMap.visible) {\n      return []\n    }\n\n    if (!warpedMap.hasImageInfo()) {\n      // Note: don't load image information here\n      // this would imply waiting for the first throttling cycle to complete\n      // before acting on a sucessful load\n      return []\n    }\n\n    // Find TileZoomLevel for the current viewport\n    // Note the equivalence of the following two:\n    // - warpedMap.getApproxResourceToCanvasScale(this.viewport)\n    // - warpedMap.resourceToProjectedGeoScale * this.viewport.projectedGeoPerCanvasScale\n    const tileZoomLevel = getTileZoomLevelForScale(\n      warpedMap.parsedImage.tileZoomLevels,\n      warpedMap.getResourceToCanvasScale(viewport),\n      SCALE_FACTOR_CORRECTION,\n      LOG2_SCALE_FACTOR_CORRECTION\n    )\n    warpedMap.setTileZoomLevelForViewport(tileZoomLevel)\n\n    // Transforming the viewport back to resource\n    const transformerOptions = {\n      maxDepth: 0,\n      // maxDepth: 2,\n      // minOffsetRatio: 0.00001,\n      sourceIsGeographic: false,\n      destinationIsGeographic: true\n    }\n    // This can be expensive at high maxDepth and seems to work fine with maxDepth = 0\n    // TODO: Consider recusive refinement via options like {minOffsetRatio: 0.00001, maxDepth: 2}\n    // Note: if recursive refinement, use geographic distances and midpoints for lon-lat destination points\n    const projectedGeoBufferedViewportRectangle =\n      viewport.getProjectedGeoBufferedRectangle(\n        this.shouldAnticipateInteraction() ? REQUEST_VIEWPORT_BUFFER_RATIO : 0\n      )\n    // Optimise computation time of backwards transformation:\n    // Since this is the only place transformToResource is called\n    // (and hence backwards transformation is computed)\n    // and computing thinPlateSpline can be expensive for maps with many gcps\n    // we can chose to compute the less expensive polynomial backward transformation.\n    // Note: for very deformed maps (with TPS and many gcps),\n    // this could lead to inaccurate tile loading (in addition to the reason explained below).\n    const projectedTransformer =\n      warpedMap.transformationType === 'thinPlateSpline' &&\n      warpedMap.gcps.length > MAX_GCPS_EXACT_TPS_TO_RESOURCE\n        ? warpedMap.getProjectedTransformer('polynomial')\n        : warpedMap.projectedTransformer\n    // Compute viewport in resource\n    // Note: since the backward transformation is not the exact inverse of the forward\n    // there is an inherent imperfection in this computation\n    // which could lead to inaccurate tile loading.\n    // In general, this is made up for by the buffers.\n    const resourceBufferedViewportRing =\n      projectedTransformer.transformToResource(\n        [projectedGeoBufferedViewportRectangle],\n        transformerOptions\n      )[0]\n    warpedMap.setProjectedGeoBufferedViewportRectangleForViewport(\n      projectedGeoBufferedViewportRectangle\n    )\n    warpedMap.setResourceBufferedViewportRingForViewport(\n      resourceBufferedViewportRing\n    )\n    // Assure variables exist on warpedMap, that should be computed by the setters above\n    if (\n      !warpedMap.resourceBufferedViewportRingBboxForViewport ||\n      !warpedMap.resourceBufferedViewportRingBboxForViewport\n    ) {\n      throw new Error(\n        'No resourceBufferedViewportRingBboxForViewport or resourceBufferedViewportRingBboxForViewport'\n      )\n    }\n\n    // Compute intersection of bboxes of to-resource-back-transformed viewport and resource mask\n    const resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection =\n      intersectBboxes(\n        warpedMap.resourceBufferedViewportRingBboxForViewport,\n        warpedMap.resourceMaskBbox\n      )\n    warpedMap.setResourceBufferedViewportRingBboxAndResourceMaskBboxIntersectionForViewport(\n      resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection\n    )\n\n    // If this map it outside of the viewport with request buffer, stop here:\n    // in thise case we only ran this function to set the properties for the current viewport\n    // so we can use them relyably while pruning\n    if (!mapsInViewportForRequest.has(mapId)) {\n      return []\n    }\n\n    // If the intersection of the bboxes is undefined, we don't need to compute any tiles.\n    // This should in general only happen if the previous check also returned false.\n    if (!resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection) {\n      return []\n    }\n\n    // Find tiles covering this intersection of bboxes of to-resource-back-transformed viewport and mask\n    // by computing the tiles covering this bbox's rectangle at the tilezoomlevel\n    const tiles = computeTilesCoveringRingAtTileZoomLevel(\n      bboxToRectangle(\n        resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection\n      ),\n      tileZoomLevel,\n      [warpedMap.parsedImage.width, warpedMap.parsedImage.height]\n    )\n\n    // Sort tiles to load in order of their distance to viewport center\n    const resourceBufferedViewportRingCenter = bboxToCenter(\n      warpedMap.resourceBufferedViewportRingBboxForViewport\n    )\n    tiles.sort(\n      (tileA, tileB) =>\n        squaredDistanceTileToPoint(tileA, resourceBufferedViewportRingCenter) -\n        squaredDistanceTileToPoint(tileB, resourceBufferedViewportRingCenter)\n    )\n\n    // Make fetchable tiles\n    const fetchableTiles = tiles.map(\n      (tile) => new FetchableTile(tile, warpedMap)\n    )\n    warpedMap.setFetchableTilesForViewport(fetchableTiles)\n\n    return fetchableTiles\n  }\n\n  protected getMapOverviewFetchableTilesForViewport(\n    mapId: string,\n    totalFetchableTilesForViewport: FetchableTile[],\n    mapsInViewportForOverviewRequest: Set<string>\n  ): FetchableTile[] {\n    if (!this.viewport) {\n      return []\n    }\n\n    const warpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n    if (!warpedMap) {\n      return []\n    }\n\n    if (!warpedMap.visible) {\n      return []\n    }\n\n    if (!warpedMap.hasImageInfo()) {\n      // Note: don't load image information here\n      // this would imply waiting for the first throttling cycle to complete\n      // before acting on a sucessful load\n      return []\n    }\n\n    // No overview tiles if too many fetchable tiles in total already\n    const totalFetchableTilesResolution = getTilesResolution(\n      totalFetchableTilesForViewport.map((fetchableTile) => fetchableTile.tile)\n    )\n    const maxTotalFetchableTilesResolution =\n      this.viewport.canvasResolution * MAX_TOTAL_RESOLUTION_RATIO\n\n    if (totalFetchableTilesResolution > maxTotalFetchableTilesResolution) {\n      return []\n    }\n\n    // Find the fitting overview zoomlevel, if any\n    const overviewTileZoomLevel = warpedMap.parsedImage.tileZoomLevels\n      .filter(\n        (tileZoomLevel) =>\n          getTileZoomLevelResolution(tileZoomLevel) <=\n          MAX_MAP_OVERVIEW_RESOLUTION\n        // Neglect zoomlevels that contain too many pixels\n      )\n      .sort(\n        (tileZoomLevel0, tileZoomLevel1) =>\n          tileZoomLevel0.scaleFactor - tileZoomLevel1.scaleFactor\n        // Enforcing default ascending order, e.g. from 1 to 16\n      )\n      .at(-1)\n    warpedMap.setOverviewTileZoomLevelForViewport(overviewTileZoomLevel)\n\n    // If this map it ourside of the viewport with overview buffer, stop here:\n    // in thise case we only ran this function to set the properties for the current viewport\n    // so we can use them relyably while pruning\n    if (!mapsInViewportForOverviewRequest.has(mapId)) {\n      return []\n    }\n\n    // If the overview tile zoomlevel scalefactor is the same or lower then tile zoom level scalefactor for the current viewport\n    // then this is not really an 'overview' tilezoomlevel, so don't proceed\n    if (\n      !overviewTileZoomLevel ||\n      (warpedMap.tileZoomLevelForViewport &&\n        overviewTileZoomLevel.scaleFactor <=\n          warpedMap.tileZoomLevelForViewport.scaleFactor)\n    ) {\n      return []\n    }\n\n    // Find all tiles at overview scalefactor\n    const overviewTiles = getTilesAtScaleFactor(\n      overviewTileZoomLevel.scaleFactor,\n      warpedMap.parsedImage\n    )\n\n    // Make fechable tiles\n    const overviewFetchableTiles = overviewTiles.map(\n      (tile) => new FetchableTile(tile, warpedMap)\n    )\n    warpedMap.setOverviewFetchableTilesForViewport(overviewFetchableTiles)\n\n    return overviewFetchableTiles\n  }\n\n  protected updateMapsForViewport(tiles: FetchableTile[]): {\n    mapsEnteringViewport: string[]\n    mapsLeavingViewport: string[]\n  } {\n    // Sort to process by zIndex later\n    this.mapsWithRequestedTilesForViewport = new Set(\n      tiles\n        .map((tile) => tile.mapId)\n        .filter((v, i, a) => {\n          // filter out duplicate mapIds\n          return a.indexOf(v) === i\n        })\n        .sort((mapIdA, mapIdB) => {\n          const zIndexA = this.warpedMapList.getMapZIndex(mapIdA)\n          const zIndexB = this.warpedMapList.getMapZIndex(mapIdB)\n          if (zIndexA !== undefined && zIndexB !== undefined) {\n            return zIndexA - zIndexB\n          }\n          return 0\n        })\n    )\n\n    this.mapsInPreviousViewport = this.mapsInViewport\n    this.mapsInViewport = this.findMapsInViewport()\n\n    // TODO: handle everything as Set() once JS supports filter on sets.\n    // And speed up with anonymous functions with the Set.prototype.difference() once broadly supported\n    const mapsInPreviousViewportAsArray = Array.from(\n      this.mapsInPreviousViewport\n    )\n    const mapsInViewportAsArray = Array.from(this.mapsInViewport)\n\n    const mapsEnteringViewport = mapsInViewportAsArray.filter(\n      (mapId) => !mapsInPreviousViewportAsArray.includes(mapId)\n    )\n    const mapsLeavingViewport = mapsInPreviousViewportAsArray.filter(\n      (mapId) => !mapsInViewportAsArray.includes(mapId)\n    )\n\n    for (const mapId of mapsEnteringViewport) {\n      this.dispatchEvent(\n        new WarpedMapEvent(WarpedMapEventType.WARPEDMAPENTER, mapId)\n      )\n    }\n    for (const mapId of mapsLeavingViewport) {\n      this.clearMap(mapId)\n      this.dispatchEvent(\n        new WarpedMapEvent(WarpedMapEventType.WARPEDMAPLEAVE, mapId)\n      )\n    }\n\n    return {\n      mapsEnteringViewport,\n      mapsLeavingViewport\n    }\n  }\n\n  protected pruneTileCache(mapsInViewportForOverviewPrune: Set<string>) {\n    // Create pruneInfo for all maps in viewport with prune overview buffer\n    const pruneInfoByMapId: Map<string, MapPruneInfo> = new Map()\n    for (const warpedMap of this.warpedMapList.getWarpedMaps({\n      mapIds: mapsInViewportForOverviewPrune\n    })) {\n      pruneInfoByMapId.set(warpedMap.mapId, {\n        tileZoomLevelForViewport: warpedMap.tileZoomLevelForViewport,\n        overviewTileZoomLevelForViewport:\n          warpedMap.overviewTileZoomLevelForViewport,\n        resourceViewportRingBboxForViewport:\n          warpedMap.resourceBufferedViewportRingBboxForViewport\n      })\n    }\n    this.tileCache.prune(pruneInfoByMapId)\n  }\n\n  destroy() {\n    this.tileCache.destroy()\n    this.warpedMapList.destroy()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected clearMap(mapId: string): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected mapTileLoaded(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected mapTileRemoved(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected imageInfoLoaded(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected warpedMapAdded(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected warpedMapRemoved(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected preChange(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected optionsChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected gcpsChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected resourceMaskChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected transformationChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected distortionChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected internalProjectionChanged(event: Event): void {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  protected projectionChanged(event: Event): void {}\n\n  protected addEventListeners() {\n    this.tileCache.addEventListener(\n      WarpedMapEventType.MAPTILELOADED,\n      this.mapTileLoaded.bind(this)\n    )\n\n    this.tileCache.addEventListener(\n      WarpedMapEventType.MAPTILEREMOVED,\n      this.mapTileRemoved.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.imageInfoLoaded.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.warpedMapAdded.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.warpedMapRemoved.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.PRECHANGE,\n      this.preChange.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.OPTIONSCHANGED,\n      this.optionsChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.GCPSCHANGED,\n      this.gcpsChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.RESOURCEMASKCHANGED,\n      this.gcpsChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.TRANSFORMATIONCHANGED,\n      this.transformationChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.DISTORTIONCHANGED,\n      this.distortionChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.INTERNALPROJECTIONCHANGED,\n      this.internalProjectionChanged.bind(this)\n    )\n\n    this.warpedMapList.addEventListener(\n      WarpedMapEventType.PROJECTIONCHANGED,\n      this.projectionChanged.bind(this)\n    )\n  }\n\n  protected removeEventListeners() {\n    this.tileCache.removeEventListener(\n      WarpedMapEventType.MAPTILELOADED,\n      this.mapTileLoaded.bind(this)\n    )\n\n    this.tileCache.removeEventListener(\n      WarpedMapEventType.MAPTILEREMOVED,\n      this.mapTileRemoved.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.IMAGEINFOLOADED,\n      this.imageInfoLoaded.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPADDED,\n      this.warpedMapAdded.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.WARPEDMAPREMOVED,\n      this.warpedMapRemoved.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.PRECHANGE,\n      this.preChange.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.OPTIONSCHANGED,\n      this.optionsChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.GCPSCHANGED,\n      this.gcpsChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.RESOURCEMASKCHANGED,\n      this.gcpsChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.TRANSFORMATIONCHANGED,\n      this.transformationChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.DISTORTIONCHANGED,\n      this.distortionChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.INTERNALPROJECTIONCHANGED,\n      this.internalProjectionChanged.bind(this)\n    )\n\n    this.warpedMapList.removeEventListener(\n      WarpedMapEventType.PROJECTIONCHANGED,\n      this.projectionChanged.bind(this)\n    )\n  }\n}\n"],"names":[],"mappings":"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"}