{"version":3,"file":"WebGL2Renderer.js","sources":["../../src/renderers/WebGL2Renderer.ts"],"sourcesContent":["import { throttle } from 'lodash-es'\nimport { wrap as comlinkWtap } from 'comlink'\n\nimport {\n  hexToFractionalRgb,\n  maxOfNumberOrUndefined,\n  mergeOptions,\n  squaredDistance\n} from '@allmaps/stdlib'\nimport { supportedDistortionMeasures } from '@allmaps/transform'\nimport { red, green, darkblue, yellow, black } from '@allmaps/tailwind'\n\nimport { BaseRenderer } from './BaseRenderer.js'\nimport {\n  WebGL2WarpedMap,\n  createWebGL2WarpedMapFactory\n} from '../maps/WebGL2WarpedMap.js'\nimport { CacheableWorkerImageDataTile } from '../tilecache/CacheableWorkerImageDataTile.js'\nimport {\n  WarpedMapEvent,\n  WarpedMapEventType,\n  WarpedMapTileEventDetail\n} from '../shared/events.js'\nimport {\n  multiplyHomogeneousTransform,\n  invertHomogeneousTransform,\n  homogeneousTransformToMatrix4\n} from '../shared/homogeneous-transform.js'\nimport { createShader, createProgram } from '../shared/webgl2.js'\nimport { Viewport } from '../viewport/Viewport.js'\n\nimport mapVertexShaderSource from '../shaders/map/vertex-shader.glsl'\nimport mapFragmentShaderSource from '../shaders/map/fragment-shader.glsl'\nimport linesVertexShaderSource from '../shaders/lines/vertex-shader.glsl'\nimport linesFragmentShaderSource from '../shaders/lines/fragment-shader.glsl'\nimport pointsVertexShaderSource from '../shaders/points/vertex-shader.glsl'\nimport pointsFragmentShaderSource from '../shaders/points/fragment-shader.glsl'\n\n// Using the recommended URL constructor -\n// See https://vite.dev/guide/features.html#import-with-constructors -\n// leads to import errors when publising on platforms like jsdelivr.\n// Using the inline query parameter solves this.\nimport FetchAndGetImageDataWorker from '../workers/fetch-and-get-image-data.js?worker&inline'\n\nimport type { DebouncedFunc } from 'lodash-es'\n\nimport type { FetchableTile } from '../tilecache/FetchableTile.js'\n\nimport type { FetchAndGetImageDataWorkerType } from '../workers/fetch-and-get-image-data.js'\n\nimport type {\n  Renderer,\n  RenderOptions,\n  RemoveColorOptions,\n  ColorizeOptions,\n  GridOptions,\n  WebGL2RendererOptions\n} from '../shared/types.js'\n\nconst THROTTLE_PREPARE_RENDER_WAIT_MS = 200\nconst THROTTLE_PREPARE_RENDER_OPTIONS = {\n  leading: true,\n  trailing: true\n}\n\nconst THROTTLE_CHANGED_WAIT_MS = 50\nconst THROTTLE_CHANGED_OPTIONS = {\n  leading: true,\n  trailing: true\n}\n\nconst defaultWebgl2RendererOptions = {\n  debugMaps: false,\n  renderMaps: true,\n  renderLines: true,\n  renderPoints: true\n}\n\nconst DEFAULT_OPACITY = 1\nconst DEFAULT_SATURATION = 1\nconst DEFAULT_REMOVE_COLOR_THRESHOLD = 0\nconst DEFAULT_REMOVE_COLOR_HARDNESS = 0.7\nconst SIGNIFICANT_VIEWPORT_EPSILON = 100 * Number.EPSILON\nconst SIGNIFICANT_VIEWPORT_DISTANCE = 5\nconst ANIMATION_DURATION = 750\n\n/**\n * Class that renders WarpedMaps to a WebGL 2 context\n */\nexport class WebGL2Renderer\n  extends BaseRenderer<WebGL2WarpedMap, ImageData>\n  implements Renderer\n{\n  #worker: Worker\n\n  gl: WebGL2RenderingContext\n\n  partialWebgl2RendererOptions: Partial<WebGL2RendererOptions>\n\n  mapProgram: WebGLProgram\n  linesProgram: WebGLProgram\n  pointsProgram: WebGLProgram\n\n  previousSignificantViewport: Viewport | undefined\n\n  opacity: number = DEFAULT_OPACITY\n  saturation: number = DEFAULT_SATURATION\n  renderOptions: RenderOptions = {}\n\n  lastAnimationFrameRequestId: number | undefined\n  animating = false\n  transformaterTransitionStart: number | undefined\n  animationProgress = 0\n\n  disableRender = false\n\n  private throttledPrepareRenderInternal: DebouncedFunc<\n    typeof this.prepareRenderInternal\n  >\n\n  private throttledChanged: DebouncedFunc<typeof this.changed>\n\n  /**\n   * Creates an instance of WebGL2Renderer.\n   *\n   * @constructor\n   * @param gl - WebGL 2 rendering context\n   * @param options - options\n   */\n  constructor(\n    gl: WebGL2RenderingContext,\n    options?: Partial<WebGL2RendererOptions>\n  ) {\n    const mapVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      mapVertexShaderSource\n    )\n    const mapFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      mapFragmentShaderSource\n    )\n\n    const linesVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      linesVertexShaderSource\n    )\n    const linesFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      linesFragmentShaderSource\n    )\n\n    const pointsVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      pointsVertexShaderSource\n    )\n    const pointsFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      pointsFragmentShaderSource\n    )\n\n    const mapProgram = createProgram(gl, mapVertexShader, mapFragmentShader)\n    const linesProgram = createProgram(\n      gl,\n      linesVertexShader,\n      linesFragmentShader\n    )\n    const pointsProgram = createProgram(\n      gl,\n      pointsVertexShader,\n      pointsFragmentShader\n    )\n\n    const worker = new FetchAndGetImageDataWorker()\n    const wrappedWorker = comlinkWtap<FetchAndGetImageDataWorkerType>(worker)\n\n    super(\n      CacheableWorkerImageDataTile.createFactory(wrappedWorker),\n      createWebGL2WarpedMapFactory(gl, mapProgram, linesProgram, pointsProgram),\n      options\n    )\n\n    this.#worker = worker\n    this.gl = gl\n\n    this.partialWebgl2RendererOptions = mergeOptions(\n      defaultWebgl2RendererOptions,\n      options\n    )\n\n    this.mapProgram = mapProgram\n    this.linesProgram = linesProgram\n    this.pointsProgram = pointsProgram\n\n    // Unclear how to remove shaders, possibly already after linking to program, see:\n    // https://stackoverflow.com/questions/9113154/proper-way-to-delete-glsl-shader\n    // https://stackoverflow.com/questions/27237696/webgl-detach-and-delete-shaders-after-linking\n    gl.deleteShader(mapVertexShader)\n    gl.deleteShader(mapFragmentShader)\n    gl.deleteShader(mapVertexShader)\n    gl.deleteShader(mapFragmentShader)\n    gl.deleteShader(mapVertexShader)\n    gl.deleteShader(mapFragmentShader)\n\n    gl.disable(gl.DEPTH_TEST)\n\n    this.addEventListeners()\n\n    this.throttledPrepareRenderInternal = throttle(\n      this.prepareRenderInternal.bind(this),\n      THROTTLE_PREPARE_RENDER_WAIT_MS,\n      THROTTLE_PREPARE_RENDER_OPTIONS\n    )\n\n    this.throttledChanged = throttle(\n      this.changed.bind(this),\n      THROTTLE_CHANGED_WAIT_MS,\n      THROTTLE_CHANGED_OPTIONS\n    )\n  }\n\n  initializeWebGL(gl: WebGL2RenderingContext) {\n    // This code is duplicated from the constructor to allow for context loss and restoration\n    // Can't call this function in the constructor, because 'super' must be called before accessing 'this'\n    const mapVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      mapVertexShaderSource\n    )\n    const mapFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      mapFragmentShaderSource\n    )\n\n    const linesVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      linesVertexShaderSource\n    )\n    const linesFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      linesFragmentShaderSource\n    )\n\n    const pointsVertexShader = createShader(\n      gl,\n      gl.VERTEX_SHADER,\n      pointsVertexShaderSource\n    )\n    const pointsFragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      pointsFragmentShaderSource\n    )\n\n    const mapProgram = createProgram(gl, mapVertexShader, mapFragmentShader)\n    const linesProgram = createProgram(\n      gl,\n      linesVertexShader,\n      linesFragmentShader\n    )\n    const pointsProgram = createProgram(\n      gl,\n      pointsVertexShader,\n      pointsFragmentShader\n    )\n\n    this.gl = gl\n    this.mapProgram = mapProgram\n    this.linesProgram = linesProgram\n    this.pointsProgram = pointsProgram\n\n    gl.disable(gl.DEPTH_TEST)\n\n    for (const webgl2WarpedMap of this.warpedMapList.getWarpedMaps()) {\n      webgl2WarpedMap.initializeWebGL(mapProgram, linesProgram, pointsProgram)\n    }\n  }\n\n  /**\n   * Get the opacity of the renderer\n   *\n   * @returns\n   */\n  getOpacity(): number | undefined {\n    return this.opacity\n  }\n\n  /**\n   * Set the opacity of the renderer\n   *\n   * @param opacity - opacity to set\n   */\n  setOpacity(opacity: number): void {\n    this.opacity = opacity\n  }\n\n  /**\n   * Reset the opacity of the renderer\n   */\n  resetOpacity(): void {\n    this.opacity = DEFAULT_OPACITY\n  }\n\n  /**\n   * Get the opacity of a map\n   *\n   * @param mapId - ID of the map\n   * @returns\n   */\n  getMapOpacity(mapId: string): number | undefined {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n    if (webgl2WarpedMap) {\n      return webgl2WarpedMap.opacity\n    }\n  }\n\n  /**\n   * Set the opacity of a map\n   *\n   * @param mapId - ID of the map\n   * @param opacity - opacity to set\n   */\n  setMapOpacity(mapId: string, opacity: number): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.opacity = Math.min(Math.max(opacity, 0), 1)\n    }\n  }\n\n  /**\n   * Rreset the opacity of a map\n   *\n   * @param mapId - ID of the map\n   */\n  resetMapOpacity(mapId: string): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.opacity = DEFAULT_OPACITY\n    }\n  }\n\n  /**\n   * Get the remove color options of the renderer\n   *\n   * @returns\n   */\n  getRemoveColorOptions(): Partial<RemoveColorOptions> | undefined {\n    return this.renderOptions.removeColorOptions\n  }\n\n  /**\n   * Set the remove color options of the renderer\n   *\n   * @param removeColorOptions\n   */\n  setRemoveColorOptions(removeColorOptions: RemoveColorOptions) {\n    this.renderOptions.removeColorOptions = removeColorOptions\n  }\n\n  /**\n   * Reset the remove color options of the renderer\n   */\n  resetRemoveColorOptions() {\n    this.renderOptions.removeColorOptions = undefined\n  }\n\n  /**\n   * Get the remove color options of a map\n   *\n   * @param mapId - ID of the map\n   * @returns\n   */\n  getMapRemoveColorOptions(\n    mapId: string\n  ): Partial<RemoveColorOptions> | undefined {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      return webgl2WarpedMap.renderOptions.removeColorOptions\n    }\n  }\n\n  /**\n   * Set the WebGL2 Renderer options\n   *\n   * @param partialWebgl2RendererOptions - Options\n   */\n  setOptions(\n    partialWebgl2RendererOptions?: Partial<WebGL2RendererOptions>\n  ): void {\n    this.partialWebgl2RendererOptions = mergeOptions(\n      this.partialWebgl2RendererOptions,\n      partialWebgl2RendererOptions\n    )\n    super.setOptions(partialWebgl2RendererOptions)\n  }\n\n  /**\n   * Set the remove color options of a map\n   *\n   * @param mapId - ID of the map\n   * @param removeColorOptions - the 'remove color options' to set\n   */\n  setMapRemoveColorOptions(\n    mapId: string,\n    removeColorOptions: RemoveColorOptions\n  ): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.removeColorOptions = removeColorOptions\n    }\n  }\n\n  /**\n   * Reset the remove color options of a map\n   *\n   * @param mapId - ID of the map\n   */\n  resetMapRemoveColorOptions(mapId: string): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.removeColorOptions = undefined\n    }\n  }\n\n  /**\n   * Get the colorize options of the renderer\n   *\n   * @returns\n   */\n  getColorizeOptions(): Partial<ColorizeOptions> | undefined {\n    return this.renderOptions.colorizeOptions\n  }\n\n  /**\n   * Set the colorize options of the renderer\n   *\n   * @param colorizeOptions - the colorize options to set\n   */\n  setColorizeOptions(colorizeOptions: ColorizeOptions): void {\n    this.renderOptions.colorizeOptions = colorizeOptions\n  }\n\n  /**\n   * Reset the colorize options of the renderer\n   */\n  resetColorizeOptions(): void {\n    this.renderOptions.colorizeOptions = undefined\n  }\n\n  /**\n   * Get the colorize options of a map\n   *\n   * @param mapId - ID of the map\n   * @returns Colorize options\n   */\n  getMapColorizeOptions(mapId: string): Partial<ColorizeOptions> | undefined {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      return webgl2WarpedMap.renderOptions.colorizeOptions\n    }\n  }\n\n  /**\n   * Set the colorize options of a map\n   *\n   * @param mapId - ID of the map\n   * @param colorizeOptions - the colorize options to set\n   */\n  setMapColorizeOptions(mapId: string, colorizeOptions: ColorizeOptions): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.colorizeOptions = colorizeOptions\n    }\n  }\n\n  /**\n   * Reset the colorize options of a map\n   *\n   * @param mapId - ID of the map\n   */\n  resetMapColorizeOptions(mapId: string): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.colorizeOptions = undefined\n    }\n  }\n\n  /**\n   * Get the grid options of the renderer\n   *\n   * @returns\n   */\n  getGridOptions(): Partial<GridOptions> | undefined {\n    return this.renderOptions.gridOptions\n  }\n\n  /**\n   * Set the grid options of the renderer\n   *\n   * @param gridOptions - the grid options to set\n   */\n  setGridOptions(gridOptions: GridOptions): void {\n    this.renderOptions.gridOptions = gridOptions\n  }\n\n  /**\n   * Reset the grid options of the renderer\n   */\n  resetGridOptions(): void {\n    this.renderOptions.gridOptions = undefined\n  }\n\n  /**\n   * Get the grid options of a map\n   *\n   * @param mapId - ID of the map\n   * @returns\n   */\n  getMapGridOptions(mapId: string): Partial<GridOptions> | undefined {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      return webgl2WarpedMap.renderOptions.gridOptions\n    }\n  }\n\n  /**\n   * Set the grid options of a map\n   *\n   * @param mapId - ID of the map\n   * @param gridOptions - the grid options to set\n   */\n  setMapGridOptions(mapId: string, gridOptions: GridOptions): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.gridOptions = gridOptions\n    }\n  }\n\n  /**\n   * Reset the grid options of a map\n   *\n   * @param mapId - ID of the map\n   */\n  resetMapGridOptions(mapId: string): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.renderOptions.gridOptions = undefined\n    }\n  }\n\n  /**\n   * Get the saturation of the renderer\n   *\n   * @returns\n   */\n  getSaturation(): number {\n    return this.saturation\n  }\n\n  /**\n   * Set the saturation of the renderer\n   *\n   * 0 - grayscale, 1 - original colors\n   *\n   * @param saturation - the satuation to set\n   */\n  setSaturation(saturation: number): void {\n    this.saturation = saturation\n  }\n\n  /**\n   * Reset the satuation of the renderer\n   */\n  resetSaturation(): void {\n    this.saturation = DEFAULT_SATURATION\n  }\n\n  /**\n   * Get the saturation of a map\n   *\n   * @param mapId - ID of the map\n   * @returns\n   */\n  getMapSaturation(mapId: string): number | undefined {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      return webgl2WarpedMap.saturation\n    }\n  }\n\n  /**\n   * Set the saturation of a map\n   *\n   * 0 - grayscale, 1 - original colors\n   *\n   * @param mapId - ID of the map\n   * @param saturation - the saturation to set\n   */\n  setMapSaturation(mapId: string, saturation: number): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.saturation = saturation\n    }\n  }\n\n  /**\n   * Reset the saturation of a map\n   *\n   * @param mapId - ID of the map\n   */\n  resetMapSaturation(mapId: string): void {\n    const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webgl2WarpedMap) {\n      webgl2WarpedMap.saturation = DEFAULT_SATURATION\n    }\n  }\n\n  /**\n   * Render the map for a given viewport.\n   *\n   * If no viewport is specified the current viewport is rerendered.\n   * If no current viewport is known, a viewport is deduced based on the WarpedMapList and canvas width and hight.\n   *\n   * @param viewport - the current viewport\n   */\n  render(viewport?: Viewport): void {\n    if (this.disableRender) {\n      return\n    }\n\n    this.viewport =\n      viewport ||\n      this.viewport ||\n      Viewport.fromSizeAndMaps(\n        [this.gl.canvas.width, this.gl.canvas.width],\n        this.warpedMapList\n      )\n\n    // Not awaiting this, using events to trigger new render calls\n    this.loadMissingImageInfosInViewport()\n\n    // Don't fire throttled function unless it could result in something\n    // Otherwise we have to wait for that cycle to finish before useful cycle can be started\n    if (this.someImageInfosInViewport()) {\n      this.throttledPrepareRenderInternal()\n    }\n\n    this.renderInternal()\n  }\n\n  clear() {\n    this.warpedMapList.clear()\n    this.mapsInViewport = new Set()\n    this.mapsWithRequestedTilesForViewport = new Set()\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT)\n    this.tileCache.clear()\n  }\n\n  cancelThrottledFunctions() {\n    this.throttledPrepareRenderInternal.cancel()\n    this.throttledChanged.cancel()\n  }\n\n  destroy() {\n    this.cancelThrottledFunctions()\n\n    for (const webgl2WarpedMap of this.warpedMapList.getWarpedMaps()) {\n      this.removeEventListenersFromWebGL2WarpedMap(webgl2WarpedMap)\n    }\n\n    this.removeEventListeners()\n\n    super.destroy()\n\n    this.gl.deleteProgram(this.mapProgram)\n    this.gl.deleteProgram(this.linesProgram)\n    this.gl.deleteProgram(this.pointsProgram)\n\n    this.#worker.terminate()\n    // Can't delete context, see:\n    // https://stackoverflow.com/questions/14970206/deleting-webgl-contexts\n  }\n\n  protected updateMapsForViewport(tiles: FetchableTile[]): {\n    mapsEnteringViewport: string[]\n    mapsLeavingViewport: string[]\n  } {\n    const { mapsEnteringViewport, mapsLeavingViewport } =\n      super.updateMapsForViewport(tiles)\n\n    this.updateVertexBuffers(mapsEnteringViewport)\n\n    return { mapsEnteringViewport, mapsLeavingViewport }\n  }\n\n  protected resetPrevious(mapIds?: string[]) {\n    const webgl2WarpedMaps = this.warpedMapList.getWarpedMaps({ mapIds })\n    for (const webgl2WarpedMap of webgl2WarpedMaps) {\n      webgl2WarpedMap.resetPrevious()\n    }\n  }\n\n  protected updateVertexBuffers(mapIds?: string[]) {\n    if (!this.viewport) {\n      return\n    }\n\n    const webgl2WarpedMaps = this.warpedMapList.getWarpedMaps({ mapIds })\n    for (const webgl2WarpedMap of webgl2WarpedMaps) {\n      webgl2WarpedMap.updateVertexBuffers(\n        this.viewport.projectedGeoToClipHomogeneousTransform,\n        this.partialWebgl2RendererOptions\n      )\n    }\n  }\n\n  private prepareRenderInternal(): void {\n    this.assureProjection()\n    this.requestFetchableTiles()\n  }\n\n  protected shouldRequestFetchableTiles(): boolean {\n    // Returns whether requested tiles should be updated\n\n    // Returns true when the viewport moved significantly\n    // > to prevent updating requested tiles on minimal movements/\n    // Returns true when the viewport didn't move at all\n    // > since this function is called (possibly multiple times) during startup, without changes to the viewport\n    // Returns false in other cases\n\n    // TODO: this could be a problem if the viewport is quickly and continuously moved\n    // within the tolerance during initial loading.\n    // Possible solution: adding a 'allrendered' event and listening to it.\n\n    if (!this.viewport) {\n      return false\n    }\n    if (this.animating) {\n      return false\n    }\n    if (!this.previousSignificantViewport) {\n      this.previousSignificantViewport = this.viewport\n      return true\n    } else {\n      const rectangleSquaredDistances = []\n      for (let i = 0; i < 4; i++) {\n        rectangleSquaredDistances.push(\n          squaredDistance(\n            this.previousSignificantViewport.projectedGeoRectangle[i],\n            this.viewport.projectedGeoRectangle[i]\n          ) / Math.pow(this.viewport.projectedGeoPerViewportScale, 2)\n        )\n      }\n      const maxSquaredDistance = Math.max(...rectangleSquaredDistances)\n      if (maxSquaredDistance < SIGNIFICANT_VIEWPORT_EPSILON) {\n        return true\n      }\n      if (maxSquaredDistance > Math.pow(SIGNIFICANT_VIEWPORT_DISTANCE, 2)) {\n        this.previousSignificantViewport = this.viewport\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n\n  protected shouldAnticipateInteraction() {\n    // Get a map's overview tiles only for this render\n    return true\n  }\n\n  private renderInternal(): void {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.enable(gl.BLEND)\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\n\n    if (this.partialWebgl2RendererOptions.renderMaps) {\n      this.renderMapsInternal()\n    }\n    if (this.partialWebgl2RendererOptions.renderLines) {\n      this.renderLinesInternal()\n    }\n    if (this.partialWebgl2RendererOptions.renderPoints) {\n      this.renderPointsInternal()\n    }\n  }\n\n  private renderMapsInternal(): void {\n    if (!this.viewport) {\n      return\n    }\n\n    this.setMapProgramUniforms()\n\n    for (const mapId of this.mapsWithRequestedTilesForViewport) {\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n      if (!webgl2WarpedMap) {\n        continue\n      }\n\n      this.setMapProgramRenderOptionsUniforms(\n        this.renderOptions,\n        webgl2WarpedMap.renderOptions\n      )\n      this.setMapProgramMapUniforms(webgl2WarpedMap)\n\n      // Draw map\n      const count = webgl2WarpedMap.resourceTrianglePoints.length\n      const primitiveType = this.gl.TRIANGLES\n      const offset = 0\n      this.gl.bindVertexArray(webgl2WarpedMap.mapVao)\n      this.gl.drawArrays(primitiveType, offset, count)\n    }\n  }\n\n  private renderLinesInternal(): void {\n    this.setLinesProgramUniforms()\n\n    for (const mapId of this.mapsInViewport) {\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n      if (!webgl2WarpedMap) {\n        continue\n      }\n\n      this.setLinesProgramMapUniforms(webgl2WarpedMap)\n\n      // Draw lines for each map\n      const count =\n        webgl2WarpedMap.lineLayers.reduce(\n          (accumulator: number, lineLayer) =>\n            accumulator + lineLayer.projectedGeoLines.length,\n          0\n        ) * 6\n      const primitiveType = this.gl.TRIANGLES\n      const offset = 0\n      this.gl.bindVertexArray(webgl2WarpedMap.linesVao)\n      this.gl.drawArrays(primitiveType, offset, count)\n    }\n  }\n\n  private renderPointsInternal(): void {\n    this.setPointsProgramUniforms()\n\n    for (const mapId of this.mapsInViewport) {\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n      if (!webgl2WarpedMap) {\n        continue\n      }\n\n      this.setPointsProgramMapUniforms(webgl2WarpedMap)\n\n      // Draw points for each map\n      const count = webgl2WarpedMap.pointLayers.reduce(\n        (accumulator: number, pointLayer) =>\n          accumulator + pointLayer.projectedGeoPoints.length,\n        0\n      )\n      const primitiveType = this.gl.POINTS\n      const offset = 0\n      this.gl.bindVertexArray(webgl2WarpedMap.pointsVao)\n      this.gl.drawArrays(primitiveType, offset, count)\n    }\n  }\n\n  private setMapProgramUniforms() {\n    const program = this.mapProgram\n    const gl = this.gl\n    gl.useProgram(program)\n\n    // Debug\n    const debugLocation = gl.getUniformLocation(program, 'u_debug')\n    gl.uniform1f(\n      debugLocation,\n      this.partialWebgl2RendererOptions.debugMaps ? 1 : 0\n    )\n\n    // Animation progress\n    const animationProgressLocation = gl.getUniformLocation(\n      program,\n      'u_animationProgress'\n    )\n    gl.uniform1f(animationProgressLocation, this.animationProgress)\n\n    // Distortion colors\n    // TODO: make these colors pickable\n    const colorDistortion00 = gl.getUniformLocation(\n      program,\n      'u_colorDistortion00'\n    )\n    gl.uniform4f(colorDistortion00, ...hexToFractionalRgb(red), 1)\n\n    const colorDistortion01 = gl.getUniformLocation(\n      program,\n      'u_colorDistortion01'\n    )\n    gl.uniform4f(colorDistortion01, ...hexToFractionalRgb(darkblue), 1)\n\n    const colorDistortion1 = gl.getUniformLocation(\n      program,\n      'u_colorDistortion1'\n    )\n    gl.uniform4f(colorDistortion1, ...hexToFractionalRgb(green), 1)\n\n    const colorDistortion2 = gl.getUniformLocation(\n      program,\n      'u_colorDistortion2'\n    )\n    gl.uniform4f(colorDistortion2, ...hexToFractionalRgb(yellow), 1)\n\n    const colorDistortion3 = gl.getUniformLocation(\n      program,\n      'u_colorDistortion3'\n    )\n    gl.uniform4f(colorDistortion3, ...hexToFractionalRgb(red), 1)\n\n    const colorGrid = gl.getUniformLocation(program, 'u_colorGrid')\n    gl.uniform4f(colorGrid, ...hexToFractionalRgb(black), 1)\n  }\n\n  private setMapProgramRenderOptionsUniforms(\n    layerRenderOptions: RenderOptions,\n    mapRenderOptions: RenderOptions\n  ) {\n    const gl = this.gl\n    const program = this.mapProgram\n    gl.useProgram(program)\n\n    const renderOptions: RenderOptions = {\n      removeColorOptions: {\n        color:\n          mapRenderOptions.removeColorOptions?.color ||\n          layerRenderOptions.removeColorOptions?.color,\n        hardness: maxOfNumberOrUndefined(\n          mapRenderOptions.removeColorOptions?.hardness,\n          layerRenderOptions.removeColorOptions?.hardness\n        ),\n        threshold: maxOfNumberOrUndefined(\n          mapRenderOptions.removeColorOptions?.threshold,\n          layerRenderOptions.removeColorOptions?.threshold\n        )\n      },\n      colorizeOptions: {\n        ...layerRenderOptions.colorizeOptions,\n        ...mapRenderOptions.colorizeOptions\n      },\n      gridOptions: {\n        ...layerRenderOptions.gridOptions,\n        ...mapRenderOptions.gridOptions\n      }\n    }\n\n    // Remove color uniforms\n    const removeColorOptionsColor = renderOptions.removeColorOptions?.color\n\n    const removeColorLocation = gl.getUniformLocation(program, 'u_removeColor')\n    gl.uniform1f(removeColorLocation, removeColorOptionsColor ? 1 : 0)\n\n    if (removeColorOptionsColor) {\n      const removeColorOptionsColorLocation = gl.getUniformLocation(\n        program,\n        'u_removeColorOptionsColor'\n      )\n      gl.uniform3fv(removeColorOptionsColorLocation, removeColorOptionsColor)\n\n      const removeColorOptionsThresholdLocation = gl.getUniformLocation(\n        program,\n        'u_removeColorOptionsThreshold'\n      )\n      gl.uniform1f(\n        removeColorOptionsThresholdLocation,\n        renderOptions.removeColorOptions?.threshold ||\n          DEFAULT_REMOVE_COLOR_THRESHOLD\n      )\n\n      const removeColorOptionsHardnessLocation = gl.getUniformLocation(\n        program,\n        'u_removeColorOptionsHardness'\n      )\n      gl.uniform1f(\n        removeColorOptionsHardnessLocation,\n        renderOptions.removeColorOptions?.hardness ||\n          DEFAULT_REMOVE_COLOR_HARDNESS\n      )\n    }\n\n    // Colorize uniforms\n    const colorizeOptionsColor = renderOptions.colorizeOptions?.color\n\n    const colorizeLocation = gl.getUniformLocation(program, 'u_colorize')\n    gl.uniform1f(colorizeLocation, colorizeOptionsColor ? 1 : 0)\n\n    if (colorizeOptionsColor) {\n      const colorizeOptionsColorLocation = gl.getUniformLocation(\n        program,\n        'u_colorizeOptionsColor'\n      )\n      gl.uniform3fv(colorizeOptionsColorLocation, colorizeOptionsColor)\n    }\n\n    // Grid uniforms\n    const gridOptionsGrid = renderOptions.gridOptions?.enabled\n\n    const gridLocation = gl.getUniformLocation(program, 'u_grid')\n    gl.uniform1f(gridLocation, gridOptionsGrid ? 1 : 0)\n  }\n\n  private setMapProgramMapUniforms(webgl2WarpedMap: WebGL2WarpedMap) {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.mapProgram\n    gl.useProgram(program)\n\n    // Render Transform\n    const renderHomogeneousTransform = multiplyHomogeneousTransform(\n      this.viewport.projectedGeoToClipHomogeneousTransform,\n      webgl2WarpedMap.invertedRenderHomogeneousTransform\n    )\n    const renderHomogeneousTransformLocation = gl.getUniformLocation(\n      program,\n      'u_renderHomogeneousTransform'\n    )\n    gl.uniformMatrix4fv(\n      renderHomogeneousTransformLocation,\n      false,\n      homogeneousTransformToMatrix4(renderHomogeneousTransform)\n    )\n\n    // Opacity\n    const opacityLocation = gl.getUniformLocation(program, 'u_opacity')\n    gl.uniform1f(opacityLocation, this.opacity * webgl2WarpedMap.opacity)\n\n    // Saturation\n    const saturationLocation = gl.getUniformLocation(program, 'u_saturation')\n    gl.uniform1f(\n      saturationLocation,\n      this.saturation * webgl2WarpedMap.saturation\n    )\n\n    // Distortion\n    const distortionLocation = gl.getUniformLocation(program, 'u_distortion')\n    gl.uniform1f(distortionLocation, webgl2WarpedMap.distortionMeasure ? 1 : 0)\n\n    const distortionOptionsDistortionMeasureLocation = gl.getUniformLocation(\n      program,\n      'u_distortionOptionsdistortionMeasure'\n    )\n    gl.uniform1i(\n      distortionOptionsDistortionMeasureLocation,\n      webgl2WarpedMap.distortionMeasure\n        ? supportedDistortionMeasures.indexOf(webgl2WarpedMap.distortionMeasure)\n        : 0\n    )\n\n    // Best scale factor\n    const scaleFactorForViewportLocation = gl.getUniformLocation(\n      program,\n      'u_scaleFactorForViewport'\n    )\n    const scaleFactorForViewport = webgl2WarpedMap.tileZoomLevelForViewport\n      ? webgl2WarpedMap.tileZoomLevelForViewport.scaleFactor\n      : 1\n    gl.uniform1i(scaleFactorForViewportLocation, scaleFactorForViewport)\n\n    // Cached tiles texture array\n    const cachedTilesTextureArrayLocation = gl.getUniformLocation(\n      program,\n      'u_cachedTilesTextureArray'\n    )\n    gl.uniform1i(cachedTilesTextureArrayLocation, 0)\n    gl.activeTexture(gl.TEXTURE0)\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, webgl2WarpedMap.cachedTilesTextureArray)\n\n    // Cached tiles resource origin points and dimensions texture\n    const cachedTilesResourceOriginPointsAndDimensionsLocation =\n      gl.getUniformLocation(\n        program,\n        'u_cachedTilesResourceOriginPointsAndDimensionsTexture'\n      )\n    gl.uniform1i(cachedTilesResourceOriginPointsAndDimensionsLocation, 1)\n    gl.activeTexture(gl.TEXTURE1)\n\n    gl.bindTexture(\n      gl.TEXTURE_2D,\n      webgl2WarpedMap.cachedTilesResourceOriginPointsAndDimensionsTexture\n    )\n\n    // Cached tiles scale factors texture\n    const cachedTileScaleFactorsTextureLocation = gl.getUniformLocation(\n      program,\n      'u_cachedTilesScaleFactorsTexture'\n    )\n    gl.uniform1i(cachedTileScaleFactorsTextureLocation, 2)\n    gl.activeTexture(gl.TEXTURE2)\n    gl.bindTexture(\n      gl.TEXTURE_2D,\n      webgl2WarpedMap.cachedTilesScaleFactorsTexture\n    )\n  }\n\n  private setLinesProgramUniforms() {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.linesProgram\n    gl.useProgram(program)\n\n    // ViewportToClip Transform\n    const viewportToClipHomogeneousTransformLocation = gl.getUniformLocation(\n      program,\n      'u_viewportToClipHomogeneousTransform'\n    )\n    gl.uniformMatrix4fv(\n      viewportToClipHomogeneousTransformLocation,\n      false,\n      homogeneousTransformToMatrix4(\n        this.viewport.viewportToClipHomogeneousTransform\n      )\n    )\n\n    // clipToViewport Transform\n    const clipToViewportHomogeneousTransformLocation = gl.getUniformLocation(\n      program,\n      'u_clipToViewportHomogeneousTransform'\n    )\n    gl.uniformMatrix4fv(\n      clipToViewportHomogeneousTransformLocation,\n      false,\n      homogeneousTransformToMatrix4(\n        invertHomogeneousTransform(\n          this.viewport.viewportToClipHomogeneousTransform\n        )\n      )\n    )\n\n    // Animation progress\n    const animationProgressLocation = gl.getUniformLocation(\n      program,\n      'u_animationProgress'\n    )\n    gl.uniform1f(animationProgressLocation, this.animationProgress)\n  }\n\n  private setLinesProgramMapUniforms(webgl2WarpedMap: WebGL2WarpedMap) {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.linesProgram\n    gl.useProgram(program)\n\n    // Render Transform\n    const renderHomogeneousTransform = multiplyHomogeneousTransform(\n      this.viewport.projectedGeoToClipHomogeneousTransform,\n      webgl2WarpedMap.invertedRenderHomogeneousTransform\n    )\n    const renderHomogeneousTransformLocation = gl.getUniformLocation(\n      program,\n      'u_renderHomogeneousTransform'\n    )\n    gl.uniformMatrix4fv(\n      renderHomogeneousTransformLocation,\n      false,\n      homogeneousTransformToMatrix4(renderHomogeneousTransform)\n    )\n  }\n\n  private setPointsProgramUniforms() {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.pointsProgram\n    gl.useProgram(program)\n\n    // Animation progress\n    const animationProgressLocation = gl.getUniformLocation(\n      program,\n      'u_animationProgress'\n    )\n    gl.uniform1f(animationProgressLocation, this.animationProgress)\n  }\n\n  private setPointsProgramMapUniforms(webgl2WarpedMap: WebGL2WarpedMap) {\n    if (!this.viewport) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.pointsProgram\n    gl.useProgram(program)\n\n    // Render Transform\n    const renderHomogeneousTransform = multiplyHomogeneousTransform(\n      this.viewport.projectedGeoToClipHomogeneousTransform,\n      webgl2WarpedMap.invertedRenderHomogeneousTransform\n    )\n    const renderHomogeneousTransformLocation = gl.getUniformLocation(\n      program,\n      'u_renderHomogeneousTransform'\n    )\n    gl.uniformMatrix4fv(\n      renderHomogeneousTransformLocation,\n      false,\n      homogeneousTransformToMatrix4(renderHomogeneousTransform)\n    )\n  }\n\n  private startTransformerTransition(mapIds: string[]) {\n    this.updateVertexBuffers(mapIds)\n\n    if (this.lastAnimationFrameRequestId !== undefined) {\n      cancelAnimationFrame(this.lastAnimationFrameRequestId)\n    }\n\n    this.animating = true\n    this.transformaterTransitionStart = undefined\n    this.lastAnimationFrameRequestId = requestAnimationFrame(\n      ((now: number) => this.transformerTransitionFrame(now, mapIds)).bind(this)\n    )\n  }\n\n  private transformerTransitionFrame(now: number, mapIds: string[]) {\n    if (!this.transformaterTransitionStart) {\n      this.transformaterTransitionStart = now\n    }\n\n    if (now - this.transformaterTransitionStart < ANIMATION_DURATION) {\n      // Animation is ongoing\n      // animationProgress goes from 0 to 1 throughout animation\n      this.animationProgress =\n        (now - this.transformaterTransitionStart) / ANIMATION_DURATION\n\n      // First trigger a general repaint to clear canvas\n      this.changed()\n\n      this.renderInternal()\n\n      this.lastAnimationFrameRequestId = requestAnimationFrame(\n        ((now: number) => this.transformerTransitionFrame(now, mapIds)).bind(\n          this\n        )\n      )\n    } else {\n      // Animation ended\n      this.finishTransformerTransition(mapIds)\n    }\n  }\n\n  private finishTransformerTransition(mapIds: string[]) {\n    this.resetPrevious(mapIds)\n    this.updateVertexBuffers(mapIds)\n\n    this.animating = false\n    this.animationProgress = 0\n    this.transformaterTransitionStart = undefined\n\n    this.changed()\n  }\n\n  private changed() {\n    this.dispatchEvent(new WarpedMapEvent(WarpedMapEventType.CHANGED))\n  }\n\n  protected imageInfoLoaded(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      this.dispatchEvent(new WarpedMapEvent(WarpedMapEventType.IMAGEINFOLOADED))\n    }\n  }\n\n  protected clearMap(mapId: string) {\n    const webGL2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n    if (webGL2WarpedMap) {\n      webGL2WarpedMap.clearTextures()\n    }\n  }\n\n  protected mapTileLoaded(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const { mapId, tileUrl } = event.data as WarpedMapTileEventDetail\n      const tile = this.tileCache.getCacheableTile(tileUrl)\n\n      if (!tile) {\n        return\n      }\n\n      if (!tile.isCachedTile()) {\n        return\n      }\n\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n      if (!webgl2WarpedMap) {\n        return\n      }\n\n      webgl2WarpedMap.addCachedTileAndUpdateTextures(tile)\n    }\n  }\n\n  protected mapTileRemoved(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const { mapId, tileUrl } = event.data as WarpedMapTileEventDetail\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n\n      if (!webgl2WarpedMap) {\n        return\n      }\n\n      webgl2WarpedMap.removeCachedTileAndUpdateTextures(tileUrl)\n    }\n  }\n\n  protected warpedMapAdded(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapId = event.data as string\n      const webgl2WarpedMap = this.warpedMapList.getWarpedMap(mapId)\n      if (webgl2WarpedMap) {\n        this.addEventListenersToWebGL2WarpedMap(webgl2WarpedMap)\n      }\n    }\n  }\n\n  protected preChange(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      for (const webgl2WarpedMap of this.warpedMapList.getWarpedMaps({\n        mapIds\n      })) {\n        if (this.animating) {\n          webgl2WarpedMap.mixPreviousAndNew(1 - this.animationProgress)\n        }\n      }\n    }\n  }\n\n  protected optionsChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.finishTransformerTransition(mapIds)\n    }\n    this.changed()\n  }\n\n  protected gcpsChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.finishTransformerTransition(mapIds)\n    }\n    this.changed()\n  }\n\n  protected resourceMaskChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.finishTransformerTransition(mapIds)\n    }\n    this.changed()\n  }\n\n  protected transformationChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.startTransformerTransition(mapIds)\n    }\n  }\n\n  protected distortionChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.startTransformerTransition(mapIds)\n    }\n  }\n\n  protected internalProjectionChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.startTransformerTransition(mapIds)\n    }\n  }\n\n  protected projectionChanged(event: Event) {\n    if (event instanceof WarpedMapEvent) {\n      const mapIds = event.data as string[]\n      this.finishTransformerTransition(mapIds)\n    }\n    this.changed()\n  }\n\n  private addEventListenersToWebGL2WarpedMap(webgl2WarpedMap: WebGL2WarpedMap) {\n    webgl2WarpedMap.addEventListener(\n      WarpedMapEventType.TEXTURESUPDATED,\n      this.throttledChanged.bind(this)\n    )\n  }\n\n  private removeEventListenersFromWebGL2WarpedMap(\n    webgl2WarpedMap: WebGL2WarpedMap\n  ) {\n    webgl2WarpedMap.removeEventListener(\n      WarpedMapEventType.TEXTURESUPDATED,\n      this.throttledChanged.bind(this)\n    )\n  }\n\n  contextLost() {\n    this.disableRender = true\n\n    this.cancelThrottledFunctions()\n    for (const webgl2WarpedMap of this.warpedMapList.getWarpedMaps()) {\n      webgl2WarpedMap.cancelThrottledFunctions()\n    }\n\n    this.tileCache.clear()\n  }\n\n  contextRestored() {\n    this.initializeWebGL(this.gl)\n\n    this.disableRender = false\n  }\n}\n"],"names":["mapVertexShaderSource","mapFragmentShaderSource","linesVertexShaderSource","linesFragmentShaderSource","pointsVertexShaderSource","pointsFragmentShaderSource","FetchAndGetImageDataWorker","comlinkWtap","now"],"mappings":"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"}