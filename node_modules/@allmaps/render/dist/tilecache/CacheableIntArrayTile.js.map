{"version":3,"file":"CacheableIntArrayTile.js","sources":["../../src/tilecache/CacheableIntArrayTile.ts"],"sourcesContent":["import { fetchUrl } from '@allmaps/stdlib'\n\nimport { FetchableTile } from './FetchableTile.js'\nimport { CacheableTile } from './CacheableTile.js'\nimport { WarpedMapEvent, WarpedMapEventType } from '../shared/events.js'\n\nimport type { FetchFn } from '@allmaps/types'\n\nimport type { GetImageData } from '../shared/types.js'\n\n/**\n * Class for tiles that can be cached, and whose data can be processed to an IntArray.\n */\nexport class CacheableIntArrayTile<D> extends CacheableTile<D> {\n  getImageData: GetImageData<D>\n\n  constructor(\n    fetchableTile: FetchableTile,\n    getImageData: GetImageData<D>,\n    fetchFn?: FetchFn\n  ) {\n    super(fetchableTile, fetchFn)\n\n    this.getImageData = getImageData\n  }\n\n  /**\n   * Fetch the tile and create its IntArray data using the supplied getImageData function.\n   *\n   * @returns\n   */\n  async fetch() {\n    try {\n      const response = await fetchUrl(\n        this.tileUrl,\n        {\n          signal: this.abortController.signal\n        },\n        this.fetchFn\n      )\n\n      const arrayBuffer = await response.arrayBuffer()\n      this.data = this.getImageData(new Uint8ClampedArray(arrayBuffer))\n\n      this.dispatchEvent(\n        new WarpedMapEvent(WarpedMapEventType.TILEFETCHED, this.tileUrl)\n      )\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') {\n        // fetchImage was aborted because viewport was moved and tile\n        // is no longer needed. This error can be ignored, nothing to do.\n      } else {\n        this.dispatchEvent(\n          new WarpedMapEvent(WarpedMapEventType.TILEFETCHERROR, this.tileUrl)\n        )\n      }\n    }\n\n    return this.data\n  }\n\n  static createFactory<D>(getImageData: GetImageData<D>) {\n    return (fetchableTile: FetchableTile, fetchFn?: FetchFn) =>\n      new CacheableIntArrayTile(fetchableTile, getImageData, fetchFn)\n  }\n}\n\n/**\n * Class for tiles that is cached, and whose data has been processed to an IntArray.\n */\nexport class CachedIntArrayTile<D> extends CacheableIntArrayTile<D> {\n  declare data: D\n}\n"],"names":[],"mappings":";;;AAaO,MAAM,8BAAiC,cAAiB;AAAA,EAC7D;AAAA,EAEA,YACE,eACA,cACA,SACA;AACA,UAAM,eAAe,OAAO;AAE5B,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,QAAQ;AACZ,QAAI;AACF,YAAM,WAAW,MAAM;AAAA,QACrB,KAAK;AAAA,QACL;AAAA,UACE,QAAQ,KAAK,gBAAgB;AAAA,QAAA;AAAA,QAE/B,KAAK;AAAA,MAAA;AAGP,YAAM,cAAc,MAAM,SAAS,YAAA;AACnC,WAAK,OAAO,KAAK,aAAa,IAAI,kBAAkB,WAAW,CAAC;AAEhE,WAAK;AAAA,QACH,IAAI,eAAe,mBAAmB,aAAa,KAAK,OAAO;AAAA,MAAA;AAAA,IAEnE,SAAS,KAAK;AACZ,UAAI,eAAe,SAAS,IAAI,SAAS,aAAc;AAAA,WAGhD;AACL,aAAK;AAAA,UACH,IAAI,eAAe,mBAAmB,gBAAgB,KAAK,OAAO;AAAA,QAAA;AAAA,MAEtE;AAAA,IACF;AAEA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAO,cAAiB,cAA+B;AACrD,WAAO,CAAC,eAA8B,YACpC,IAAI,sBAAsB,eAAe,cAAc,OAAO;AAAA,EAClE;AACF;"}