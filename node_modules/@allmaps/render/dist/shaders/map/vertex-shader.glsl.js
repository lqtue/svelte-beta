var vertex_shader_default = "#version 300 es\n\nprecision highp float;\n\nfloat easing(float t) {\n  return t;\n\n  \n  \n}\n\nuniform mat4 u_renderHomogeneousTransform;\nuniform float u_animationProgress;\n\nin vec2 a_resourceTrianglePoint;\nin vec2 a_clipPreviousTrianglePoint;\nin vec2 a_clipTrianglePoint;\nin float a_previousTrianglePointDistortion;\nin float a_trianglePointDistortion;\nin float a_trianglePointIndex;\n\nout vec2 v_resourceTrianglePoint;\nout float v_trianglePointDistortion;\nout float v_trianglePointIndex;\nout vec4 v_trianglePointBarycentric;\n\nvoid main() {\n  \n  vec2 clipTrianglePoint = mix(a_clipPreviousTrianglePoint, a_clipTrianglePoint, easing(u_animationProgress));\n  float trianglePointDistortion = mix(a_previousTrianglePointDistortion, a_trianglePointDistortion, easing(u_animationProgress));\n\n  \n  \n  \n\n  gl_Position = u_renderHomogeneousTransform * vec4(clipTrianglePoint, 0.0f, 1.0f);\n\n  \n  v_resourceTrianglePoint = a_resourceTrianglePoint;\n  v_trianglePointDistortion = trianglePointDistortion;\n  v_trianglePointIndex = a_trianglePointIndex;\n\n  float trianglePointLocalIndex = mod(a_trianglePointIndex, 3.0f);\n  if(trianglePointLocalIndex == 0.0f)\n    v_trianglePointBarycentric = vec4(1.0f, 0, 0, 1.0f);\n  if(trianglePointLocalIndex == 1.0f)\n    v_trianglePointBarycentric = vec4(0.0f, 1.0f, 0, 1.0f);\n  if(trianglePointLocalIndex == 2.0f)\n    v_trianglePointBarycentric = vec4(0.0f, 0, 1.0f, 1.0f);\n}";
export {
  vertex_shader_default as default
};
//# sourceMappingURL=vertex-shader.glsl.js.map
