{"version":3,"file":"WarpedMap.js","sources":["../../src/maps/WarpedMap.ts"],"sourcesContent":["import { cloneDeep } from 'lodash-es'\n\nimport { GeoreferencedMap } from '@allmaps/annotation'\nimport { Image } from '@allmaps/iiif-parser'\nimport {\n  ProjectedGcpTransformer,\n  ProjectedGcpTransformerOptions,\n  Projection,\n  lonLatProjection,\n  webMercatorProjection\n} from '@allmaps/project'\nimport {\n  computeBbox,\n  bboxToRectangle,\n  rectanglesToScale,\n  fetchImageInfo,\n  getPropertyFromCacheOrComputation,\n  mixPoints,\n  sizeToRectangle,\n  mergePartialOptions,\n  mergeOptionsUnlessUndefined,\n  mergeOptions\n} from '@allmaps/stdlib'\n\nimport { applyHomogeneousTransform } from '../shared/homogeneous-transform.js'\nimport { WarpedMapEvent, WarpedMapEventType } from '../shared/events.js'\n\nimport type { WarpedMapOptions } from '../shared/types.js'\n\nimport type {\n  Gcp,\n  Point,\n  Ring,\n  Rectangle,\n  Bbox,\n  FetchFn,\n  ImageInformations,\n  TileZoomLevel\n} from '@allmaps/types'\nimport type {\n  Helmert,\n  TransformationType,\n  DistortionMeasure\n} from '@allmaps/transform'\n\nimport type { Viewport } from '../viewport/Viewport.js'\nimport type { FetchableTile } from '../tilecache/FetchableTile.js'\n\n// TODO: consider to make the default options more precise\nconst DEFAULT_PROJECTED_GCP_TRANSFORMER_OPTIONS = {\n  minOffsetRatio: 0.01,\n  minOffsetDistance: 4,\n  maxDepth: 5,\n  differentHandedness: true\n} as Partial<ProjectedGcpTransformerOptions>\n\nconst DEFAULT_WARPED_MAP_OPTIONS = {\n  visible: true,\n  applyMask: true,\n  transformationType: 'polynomial' as TransformationType,\n  internalProjection: webMercatorProjection,\n  projection: webMercatorProjection\n}\n\nexport function createWarpedMapFactory() {\n  return (\n    mapId: string,\n    georeferencedMap: GeoreferencedMap,\n    options?: Partial<WarpedMapOptions>\n  ) => new WarpedMap(mapId, georeferencedMap, options)\n}\n\n/**\n * Class for warped maps.\n * This class describes how a georeferenced map is warped using a specific transformation.\n *\n * @param mapId - ID of the map\n * @param georeferencedMap - Georeferenced map used to construct the WarpedMap\n * @param imageInformations - Image informations\n * @param parsedImage - ID of the image\n * @param visible - Whether the map is visible\n * @param applyMask - Whether to apply the mask\n * @param gcps - Ground control points used for warping this map, from resource coordinates to geospatial coordinates\n * @param projectedGcps - Projected ground control points, from resource coordinates to projected geospatial coordinates\n * @param resourcePoints - The resource coordinates of the ground control points\n * @param geoPoints - The geospatial coordinates of the ground control points\n * @param projectedGeoPoints - The projected geospatial coordinates of the projected ground control points\n * @param projectedGeoPreviousTransformedResourcePoints - The projectedGeoTransformedResourcePoints of the previous transformation type, used during transformation transitions\n * @param projectedGeoTransformedResourcePoints - The resource coordinates of the ground control points, transformed to projected geospatial coordinates using the projected transformer\n * @param resourcePreviousMask - Resource mask of the previous transformation type\n * @param resourceMask - Resource mask\n * @param resourceMaskBbox - Bbox of the resourceMask\n * @param resourceMaskRectangle - Rectangle of the resourceMaskBbox\n * @param resourceFullMask - Resource full mask (describing the entire extent of the image)\n * @param resourceFullMaskBbox - Bbox of the resource full mask\n * @param resourceFullMaskRectangle - Rectangle of the resource full mask bbox\n * @param previousTransformationType - Previous transformation type\n * @param transformationType - Transformation type used in the transfomer. This is loaded from the georeference annotation.\n * @param previousInternalProjection - Previous internal projection\n * @param internalProjection - Internal projection used in the projected transformer\n * @param projection - Projection of the projected geospatial coordinates space\n * @param projectedPreviousTransformer - Previous transformer used for warping this map from resource coordinates to projected geospatial coordinates\n * @param projectedTransformer - Transformer used for warping this map from resource coordinates to projected geospatial coordinates\n * @param projectedTransformerByTransformationType - A Map of projected transformers by transformationType\n * @param geoMask - resourceMask in geospatial coordinates\n * @param geoMaskBbox - Bbox of the geoMask\n * @param geoMaskRectangle - resourceMaskRectangle in geospatial coordinates\n * @param geoFullMask - resourceFullMask in geospatial coordinates\n * @param geoFullMaskBbox - Bbox of the geoFullMask\n * @param geoFullMaskRectangle - resourceFullMaskRectangle in geospatial coordinates\n * @param projectedGeoPreviousMask - The projectedGeoMask of the previous transformation type, used during transformation transitions\n * @param projectedGeoMask - resourceMask in projected geospatial coordinates\n * @param projectedGeoMaskBbox - Bbox of the projectedGeoMask\n * @param projectedGeoMaskRectangle - resourceMaskRectanglee in projected geospatial coordinates\n * @param projectedGeoFullMask - resourceFullMask in projected geospatial coordinates\n * @param projectedGeoFullMaskBbox - Bbox of the projectedGeoFullMask\n * @param projectedGeoFullMaskRectangle - resourceFullMaskRectangle in projected geospatial coordinates\n * @param resourceToProjectedGeoScale - Scale of the warped map, in resource pixels per projected geospatial coordinates\n * @param previousDistortionMeasure - Previous distortion measure displayed for this map\n * @param distortionMeasure - Distortion measure displayed for this map\n * @param tileZoomLevelForViewport - The tile zoom level, for the current viewport\n * @param overviewTileZoomLevelForViewport - The overview tile zoom level, for the current viewport\n * @param projectedGeoBufferedViewportRectangleForViewport - The (buffered) viewport in projected geospatial coordinates, for the current viewport\n * @param projectedGeoBufferedViewportRectangleBboxForViewport - Bbox of the projectedGeoBufferedViewportRectangle\n * @param resourceBufferedViewportRingForViewport - The (buffered) viewport transformed back to resource coordinates, for the current viewport\n * @param resourceBufferedViewportRingBboxForViewport - Bbox of the resourceViewportRing\n * @param resourceBufferedViewportRingBboxAndResourceMaskBboxIntersectionForViewport - The intersection of the bbox of the (buffered) viewport transformed back to resource coordinates and the bbox of the resource mask, for the current viewport\n * @param fetchableTilesForViewport - The fetchable tiles for displaying this map, for the current viewport\n * @param overviewFetchableTilesForViewport - The overview fetchable tiles, for the current viewport\n */\nexport class WarpedMap extends EventTarget {\n  mapId: string\n  georeferencedMap: GeoreferencedMap\n\n  imageInformations?: ImageInformations\n  parsedImage?: Image\n  loadingImageInfo: boolean\n\n  fetchFn?: FetchFn\n  protected abortController?: AbortController\n\n  visible: boolean\n  applyMask: boolean\n  mixed = false\n\n  gcps: Gcp[]\n  projectedGcps!: Gcp[]\n  resourcePoints!: Point[]\n  geoPoints!: Point[]\n  projectedGeoPoints!: Point[]\n  projectedGeoPreviousTransformedResourcePoints!: Point[]\n  projectedGeoTransformedResourcePoints!: Point[]\n\n  resourceMask: Ring\n  resourceMaskBbox!: Bbox\n  resourceMaskRectangle!: Rectangle\n  resourceFullMask!: Ring\n  resourceFullMaskBbox!: Bbox\n  resourceFullMaskRectangle!: Rectangle\n\n  previousTransformationType: TransformationType\n  transformationType: TransformationType\n\n  previousInternalProjection: Projection\n  internalProjection: Projection\n  projection: Projection\n\n  projectedPreviousTransformer!: ProjectedGcpTransformer\n  projectedTransformer!: ProjectedGcpTransformer\n  protected projectedTransformerCache: Map<\n    TransformationType,\n    ProjectedGcpTransformer\n  >\n\n  geoMask!: Ring\n  geoMaskBbox!: Bbox\n  geoMaskRectangle!: Rectangle\n  geoFullMask!: Ring\n  geoFullMaskBbox!: Bbox\n  geoFullMaskRectangle!: Rectangle\n\n  projectedGeoMask!: Ring\n  projectedGeoMaskBbox!: Bbox\n  projectedGeoMaskRectangle!: Rectangle\n  projectedGeoFullMask!: Ring\n  projectedGeoFullMaskBbox!: Bbox\n  projectedGeoFullMaskRectangle!: Rectangle\n\n  resourceToProjectedGeoScale!: number\n\n  previousDistortionMeasure?: DistortionMeasure\n  distortionMeasure?: DistortionMeasure\n\n  tileZoomLevelForViewport?: TileZoomLevel\n  overviewTileZoomLevelForViewport?: TileZoomLevel\n\n  projectedGeoBufferedViewportRectangleForViewport?: Rectangle\n  projectedGeoBufferedViewportRectangleBboxForViewport?: Bbox\n\n  resourceBufferedViewportRingForViewport?: Ring\n  resourceBufferedViewportRingBboxForViewport?: Bbox\n\n  resourceBufferedViewportRingBboxAndResourceMaskBboxIntersectionForViewport?: Bbox\n\n  fetchableTilesForViewport: FetchableTile[] = []\n  overviewFetchableTilesForViewport: FetchableTile[] = []\n\n  /**\n   * Creates an instance of WarpedMap.\n   *\n   * @param mapId - ID of the map\n   * @param georeferencedMap - Georeferenced map used to construct the WarpedMap\n   * @param partialWarpedMapOptions - options\n   */\n  constructor(\n    mapId: string,\n    georeferencedMap: GeoreferencedMap,\n    partialWarpedMapOptions?: Partial<WarpedMapOptions>\n  ) {\n    super()\n\n    // Note: defaults are overwritten by georeferenced map input\n    // (only if they are defined), which is overwritten by options\n    // This way a warped map list's current\n    // transformation and projection can overwrite those of the map\n\n    const georeferencedMapInput = {\n      transformationType: georeferencedMap.transformation\n        ?.type as TransformationType,\n      internalProjection: georeferencedMap.resourceCrs\n    }\n\n    const mapAndConstructorOptions = mergeOptions(\n      georeferencedMapInput,\n      partialWarpedMapOptions\n    )\n    const warpedMapOptions = mergeOptionsUnlessUndefined(\n      DEFAULT_WARPED_MAP_OPTIONS,\n      mapAndConstructorOptions\n    )\n\n    this.projectedTransformerCache = new Map()\n\n    this.mapId = mapId\n    this.georeferencedMap = georeferencedMap\n\n    this.imageInformations = warpedMapOptions.imageInformations\n    this.loadingImageInfo = false\n\n    this.visible = warpedMapOptions.visible\n    this.applyMask = warpedMapOptions.applyMask\n    this.fetchFn = warpedMapOptions.fetchFn\n\n    this.gcps = this.georeferencedMap.gcps\n\n    this.resourceMask = this.applyMask\n      ? this.georeferencedMap.resourceMask\n      : this.getResourceFullMask()\n    this.updateResourceMaskProperties()\n    this.updateResourceFullMaskProperties()\n\n    this.transformationType = warpedMapOptions.transformationType\n    this.previousTransformationType = this.transformationType\n\n    this.internalProjection = warpedMapOptions.internalProjection\n    this.previousInternalProjection = this.internalProjection\n    this.projection = warpedMapOptions.projection\n\n    this.updateProjectedTransformerProperties()\n  }\n\n  /**\n   * Get resourceMask in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportMask(viewport: Viewport): Ring {\n    return this.projectedGeoMask.map((point) => {\n      return applyHomogeneousTransform(\n        viewport.projectedGeoToViewportHomogeneousTransform,\n        point\n      )\n    })\n  }\n\n  /**\n   * Get Bbox of resourceMask in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportMaskBbox(viewport: Viewport): Bbox {\n    return computeBbox(this.getViewportMask(viewport))\n  }\n\n  /**\n   * Get resourceMaskRectangle in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportMaskRectangle(viewport: Viewport): Rectangle {\n    return this.projectedGeoMaskRectangle.map((point) => {\n      return applyHomogeneousTransform(\n        viewport.projectedGeoToViewportHomogeneousTransform,\n        point\n      )\n    }) as Rectangle\n  }\n\n  /**\n   * Get resourceFullMask in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportFullMask(viewport: Viewport): Ring {\n    return this.projectedGeoFullMask.map((point) => {\n      return applyHomogeneousTransform(\n        viewport.projectedGeoToViewportHomogeneousTransform,\n        point\n      )\n    })\n  }\n\n  /**\n   * Get bbox of rresourceFullMask in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportFullMaskBbox(viewport: Viewport): Bbox {\n    return computeBbox(this.getViewportFullMask(viewport))\n  }\n\n  /**\n   * Get resourceFullMaskRectangle in viewport coordinates\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getViewportFullMaskRectangle(viewport: Viewport): Rectangle {\n    return this.projectedGeoFullMaskRectangle.map((point) => {\n      return applyHomogeneousTransform(\n        viewport.projectedGeoToViewportHomogeneousTransform,\n        point\n      )\n    }) as Rectangle\n  }\n\n  /**\n   * Get scale of the warped map, in resource pixels per viewport pixels.\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getResourceToViewportScale(viewport: Viewport): number {\n    return rectanglesToScale(\n      this.resourceMaskRectangle,\n      this.getViewportMaskRectangle(viewport)\n    )\n  }\n\n  /**\n   * Get scale of the warped map, in resource pixels per canvas pixels.\n   *\n   * @param viewport - the current viewport\n   * @returns\n   */\n  getResourceToCanvasScale(viewport: Viewport): number {\n    return this.getResourceToViewportScale(viewport) / viewport.devicePixelRatio\n  }\n\n  /**\n   * Get the reference scaling from the forward transformation of the projected Helmert transformer\n   *\n   * @returns\n   */\n  getReferenceScale(): number {\n    const projectedHelmertTransformer = this.getProjectedTransformer('helmert')\n    const toProjectedGeoHelmertTransformation =\n      projectedHelmertTransformer.getToGeoTransformation() as Helmert\n    const helmertMeasures = toProjectedGeoHelmertTransformation.getMeasures()\n    return helmertMeasures.scale as number\n  }\n\n  /**\n   * Get a projected transformer of the given transformation type.\n   *\n   * Uses cashed projected transformers by transformation type,\n   * and only computes a new projected transformer if none found.\n   *\n   * Returns a projected transformer in the current projection,\n   * even if the cached transformer was computed in a different projection.\n   *\n   * Default settings apply for the options.\n   *\n   * @params transformationType - the transformation type\n   * @params partialProjectedGcpTransformerOptions - options\n   * @params useCache - whether to use the cached projected transformers previously computed\n   * @returns A projected transformer\n   */\n  getProjectedTransformer(\n    transformationType: TransformationType,\n    partialProjectedGcpTransformerOptions?: Partial<ProjectedGcpTransformerOptions>\n  ): ProjectedGcpTransformer {\n    partialProjectedGcpTransformerOptions = mergePartialOptions(\n      {\n        projection: this.projection,\n        internalProjection: this.internalProjection\n      },\n      partialProjectedGcpTransformerOptions\n    )\n    partialProjectedGcpTransformerOptions = mergePartialOptions(\n      DEFAULT_PROJECTED_GCP_TRANSFORMER_OPTIONS,\n      partialProjectedGcpTransformerOptions\n    )\n\n    const projectedTransformer = getPropertyFromCacheOrComputation(\n      this.projectedTransformerCache,\n      transformationType,\n      () =>\n        new ProjectedGcpTransformer(\n          this.gcps,\n          transformationType,\n          partialProjectedGcpTransformerOptions\n        )\n    )\n    return projectedTransformer.setProjection(this.projection)\n  }\n\n  /**\n   * Update the ground control points loaded from a georeferenced map to new ground control points.\n   *\n   * @param gcps\n   */\n  setGcps(gcps: Gcp[]): void {\n    this.gcps = gcps\n    this.clearProjectedTransformerCaches()\n    this.updateProjectedTransformerProperties()\n    this.updateGcpsProperties()\n  }\n\n  /**\n   * Update the resource mask loaded from a georeferenced map to a new mask.\n   *\n   * @param resourceMask\n   */\n  setResourceMask(resourceMask: Ring): void {\n    this.applyMask = true\n    this.resourceMask = resourceMask\n    this.updateResourceMaskProperties()\n    this.updateResourceFullMaskProperties()\n    this.updateGeoMaskProperties()\n    this.updateProjectedGeoMaskProperties()\n  }\n\n  /**\n   * Set the transformationType\n   *\n   * @param transformationType\n   */\n  setTransformationType(transformationType: TransformationType): void {\n    this.transformationType = transformationType\n    this.updateProjectedTransformerProperties()\n  }\n\n  /**\n   * Set the distortionMeasure\n   *\n   * @param distortionMeasure - the disortion measure\n   */\n  setDistortionMeasure(distortionMeasure?: DistortionMeasure): void {\n    this.distortionMeasure = distortionMeasure\n  }\n\n  /**\n   * Set the internal projection\n   *\n   * @param projection - the internal projection\n   */\n  setInternalProjection(projection?: Projection): void {\n    this.internalProjection =\n      projection ||\n      DEFAULT_PROJECTED_GCP_TRANSFORMER_OPTIONS.internalProjection ||\n      webMercatorProjection\n    this.clearProjectedTransformerCaches()\n    // Note: the following will recreate a transformer with the internal projection\n    // and also assure the triangulation is updated.\n    this.updateProjectedTransformerProperties()\n  }\n\n  /**\n   * Set the projection\n   *\n   * @param projection - the projection\n   */\n  setProjection(projection?: Projection): void {\n    this.projection =\n      projection ||\n      DEFAULT_PROJECTED_GCP_TRANSFORMER_OPTIONS.projection ||\n      webMercatorProjection\n    // Note: the following will reuse the existing transformer but set it's projection\n    // and also assure the triangulation is updated.\n    this.updateProjectedTransformerProperties()\n  }\n\n  /**\n   * Set the tile zoom level for the current viewport\n   *\n   * @param tileZoomLevel - tile zoom level for the current viewport\n   */\n  setTileZoomLevelForViewport(tileZoomLevel?: TileZoomLevel) {\n    this.tileZoomLevelForViewport = tileZoomLevel\n  }\n\n  /**\n   * Set the overview tile zoom level for the current viewport\n   *\n   * @param tileZoomLevel - tile zoom level for the current viewport\n   */\n  setOverviewTileZoomLevelForViewport(tileZoomLevel?: TileZoomLevel) {\n    this.overviewTileZoomLevelForViewport = tileZoomLevel\n  }\n\n  /**\n   * Set projectedGeoBufferedViewportRectangle for the current viewport\n   *\n   * @param projectedGeoBufferedViewportRectangle\n   */\n  setProjectedGeoBufferedViewportRectangleForViewport(\n    projectedGeoBufferedViewportRectangle?: Rectangle\n  ) {\n    this.projectedGeoBufferedViewportRectangleForViewport =\n      projectedGeoBufferedViewportRectangle\n    this.projectedGeoBufferedViewportRectangleBboxForViewport =\n      projectedGeoBufferedViewportRectangle\n        ? computeBbox(projectedGeoBufferedViewportRectangle)\n        : undefined\n  }\n\n  /**\n   * Set resourceBufferedViewportRing for the current viewport\n   *\n   * @param resourceBufferedViewportRing\n   */\n  setResourceBufferedViewportRingForViewport(\n    resourceBufferedViewportRing?: Ring\n  ) {\n    this.resourceBufferedViewportRingForViewport = resourceBufferedViewportRing\n    this.resourceBufferedViewportRingBboxForViewport =\n      resourceBufferedViewportRing\n        ? computeBbox(resourceBufferedViewportRing)\n        : undefined\n  }\n\n  /**\n   * Set resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection for the current viewport\n   *\n   * @param resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection\n   */\n  setResourceBufferedViewportRingBboxAndResourceMaskBboxIntersectionForViewport(\n    resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection?: Bbox\n  ) {\n    this.resourceBufferedViewportRingBboxAndResourceMaskBboxIntersectionForViewport =\n      resourceBufferedViewportRingBboxAndResourceMaskBboxIntersection\n  }\n\n  /**\n   * Set tiles for the current viewport\n   *\n   * @param fetchableTiles\n   */\n  setFetchableTilesForViewport(fetchableTiles: FetchableTile[]) {\n    this.fetchableTilesForViewport = fetchableTiles\n  }\n\n  /**\n   * Set overview tiles for the current viewport\n   *\n   * @param overviewFetchableTiles\n   */\n  setOverviewFetchableTilesForViewport(\n    overviewFetchableTiles: FetchableTile[]\n  ) {\n    this.overviewFetchableTilesForViewport = overviewFetchableTiles\n  }\n\n  /**\n   * Reset the properties for the current values\n   */\n  resetForViewport() {\n    this.setTileZoomLevelForViewport()\n    this.setOverviewTileZoomLevelForViewport()\n    this.setProjectedGeoBufferedViewportRectangleForViewport()\n    this.setResourceBufferedViewportRingForViewport()\n    this.setFetchableTilesForViewport([])\n    this.setOverviewFetchableTilesForViewport([])\n  }\n\n  /**\n   * Reset previous transform properties to new ones (when completing a transformer transitions).\n   */\n  resetPrevious() {\n    this.mixed = false\n    this.previousTransformationType = this.transformationType\n    this.previousDistortionMeasure = this.distortionMeasure\n    this.previousInternalProjection = this.internalProjection\n    this.projectedPreviousTransformer = cloneDeep(this.projectedTransformer)\n    this.projectedGeoPreviousTransformedResourcePoints =\n      this.projectedGeoTransformedResourcePoints\n  }\n\n  /**\n   * Mix previous transform properties with new ones (when changing an ongoing transformer transition).\n   *\n   * @param t - animation progress\n   */\n  mixPreviousAndNew(t: number) {\n    this.mixed = true\n    this.previousTransformationType = this.transformationType\n    this.previousDistortionMeasure = this.distortionMeasure\n    this.previousInternalProjection = this.internalProjection\n    this.projectedPreviousTransformer = cloneDeep(this.projectedTransformer)\n    this.projectedGeoPreviousTransformedResourcePoints =\n      this.projectedGeoTransformedResourcePoints.map((point, index) => {\n        return mixPoints(\n          point,\n          this.projectedGeoPreviousTransformedResourcePoints[index],\n          t\n        )\n      })\n  }\n\n  /**\n   * Check if this instance has image info\n   *\n   * @returns\n   */\n  hasImageInfo(): this is WarpedMapWithImageInfo {\n    return this.parsedImage !== undefined\n  }\n\n  /**\n   * Fetch and parse the image info, and generate the image ID\n   *\n   * @returns\n   */\n  async loadImageInfo(): Promise<void> {\n    try {\n      this.loadingImageInfo = true\n      const imageUri = this.georeferencedMap.resource.id\n\n      let imageInfo\n\n      if (this.imageInformations?.get(imageUri)) {\n        imageInfo = this.imageInformations.get(imageUri)\n      } else {\n        this.abortController = new AbortController()\n        const signal = this.abortController.signal\n        imageInfo = await fetchImageInfo(imageUri, { signal }, this.fetchFn)\n        this.abortController = undefined\n\n        this.imageInformations?.set(imageUri, imageInfo)\n      }\n\n      this.parsedImage = Image.parse(imageInfo)\n\n      this.dispatchEvent(new WarpedMapEvent(WarpedMapEventType.IMAGEINFOLOADED))\n    } catch (err) {\n      this.loadingImageInfo = false\n      throw err\n    } finally {\n      this.loadingImageInfo = false\n    }\n  }\n\n  private updateResourceMaskProperties() {\n    this.resourceMaskBbox = computeBbox(this.resourceMask)\n    this.resourceMaskRectangle = bboxToRectangle(this.resourceMaskBbox)\n  }\n\n  private getResourceFullMask() {\n    const resourceWidth = this.georeferencedMap.resource.width\n    const resourceHeight = this.georeferencedMap.resource.height\n\n    if (resourceWidth && resourceHeight) {\n      return sizeToRectangle([resourceWidth, resourceHeight])\n    } else {\n      return bboxToRectangle(this.resourceMaskBbox)\n    }\n  }\n\n  private updateResourceFullMaskProperties() {\n    this.resourceFullMask = this.getResourceFullMask()\n\n    this.resourceFullMaskBbox = computeBbox(this.resourceFullMask)\n    this.resourceFullMaskRectangle = bboxToRectangle(this.resourceFullMaskBbox)\n  }\n\n  private updateGeoMaskProperties() {\n    this.updateGeoMask()\n    this.updateFullGeoMask()\n  }\n\n  private updateProjectedGeoMaskProperties() {\n    this.updateProjectedGeoMask()\n    this.updateProjectedFullGeoMask()\n    this.updateResourceToProjectedGeoScale()\n  }\n\n  protected updateProjectedTransformerProperties(): void {\n    this.updateProjectedTransformer()\n\n    this.updateGeoMaskProperties()\n    this.updateProjectedGeoMaskProperties()\n    this.updateGcpsProperties()\n  }\n\n  private updateProjectedTransformer(): void {\n    this.projectedTransformer = this.getProjectedTransformer(\n      this.transformationType\n    )\n    if (!this.projectedPreviousTransformer) {\n      this.projectedPreviousTransformer = this.projectedTransformer\n    }\n  }\n\n  private updateGeoMask(): void {\n    this.geoMask = this.projectedTransformer.transformToGeo(\n      [this.resourceMask],\n      { projection: lonLatProjection }\n    )[0]\n    this.geoMaskBbox = computeBbox(this.geoMask)\n    this.geoMaskRectangle = this.projectedTransformer.transformToGeo(\n      [this.resourceMaskRectangle],\n      { maxDepth: 0, projection: lonLatProjection }\n    )[0] as Rectangle\n  }\n\n  private updateFullGeoMask(): void {\n    this.geoFullMask = this.projectedTransformer.transformToGeo(\n      [this.resourceFullMask],\n      { projection: lonLatProjection }\n    )[0]\n    this.geoFullMaskBbox = computeBbox(this.geoFullMask)\n    this.geoFullMaskRectangle = this.projectedTransformer.transformToGeo(\n      [this.resourceFullMaskRectangle],\n      { maxDepth: 0, projection: lonLatProjection }\n    )[0] as Rectangle\n  }\n\n  private updateProjectedGeoMask(): void {\n    this.projectedGeoMask = this.projectedTransformer.transformToGeo([\n      this.resourceMask\n    ])[0]\n    this.projectedGeoMaskBbox = computeBbox(this.projectedGeoMask)\n    this.projectedGeoMaskRectangle = this.projectedTransformer.transformToGeo(\n      [this.resourceMaskRectangle],\n      { maxDepth: 0 }\n    )[0] as Rectangle\n  }\n\n  private updateProjectedFullGeoMask(): void {\n    this.projectedGeoFullMask = this.projectedTransformer.transformToGeo([\n      this.resourceFullMask\n    ])[0]\n    this.projectedGeoFullMaskBbox = computeBbox(this.projectedGeoFullMask)\n    this.projectedGeoFullMaskRectangle =\n      this.projectedTransformer.transformToGeo(\n        [this.resourceFullMaskRectangle],\n        { maxDepth: 0 }\n      )[0] as Rectangle\n  }\n\n  private updateResourceToProjectedGeoScale(): void {\n    this.resourceToProjectedGeoScale = rectanglesToScale(\n      this.resourceMaskRectangle,\n      this.projectedGeoMaskRectangle\n    )\n  }\n\n  private updateGcpsProperties() {\n    this.projectedGcps = this.gcps.map(({ resource, geo }) => ({\n      resource,\n      geo: this.projectedTransformer.lonLatToProjection(geo)\n    }))\n    this.resourcePoints = this.gcps.map((gcp) => gcp.resource)\n    this.geoPoints = this.gcps.map((gcp) => gcp.geo)\n    this.projectedGeoPoints = this.projectedGcps.map(\n      (projectedGcp) => projectedGcp.geo\n    )\n\n    this.projectedGeoTransformedResourcePoints = this.gcps.map((projectedGcp) =>\n      this.projectedTransformer.transformToGeo(projectedGcp.resource)\n    )\n\n    if (!this.projectedGeoPreviousTransformedResourcePoints) {\n      this.projectedGeoPreviousTransformedResourcePoints =\n        this.projectedGeoTransformedResourcePoints\n    }\n  }\n\n  protected clearProjectedTransformerCaches() {\n    this.projectedTransformerCache = new Map()\n  }\n\n  destroy() {\n    if (this.abortController) {\n      this.abortController.abort()\n    }\n  }\n}\n\n/**\n * Class for warped maps with image ID and parsed IIIF image.\n */\nexport class WarpedMapWithImageInfo extends WarpedMap {\n  declare imageId: string\n  declare parsedImage: Image\n\n  constructor(\n    mapId: string,\n    georeferencedMap: GeoreferencedMap,\n    options?: Partial<WarpedMapOptions>\n  ) {\n    super(mapId, georeferencedMap, options)\n  }\n}\n"],"names":[],"mappings":"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"}