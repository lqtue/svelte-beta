{"version":3,"file":"WebGL2WarpedMap.js","sources":["../../src/maps/WebGL2WarpedMap.ts"],"sourcesContent":["import { throttle } from 'lodash-es'\n\nimport {\n  hexToFractionalOpaqueRgba,\n  lineStringToLines,\n  mergeOptions,\n  pointsAndPointsToLines,\n  subSetArray\n} from '@allmaps/stdlib'\nimport { GeoreferencedMap } from '@allmaps/annotation'\nimport {\n  black,\n  blue,\n  green,\n  pink,\n  white,\n  yellow,\n  gray\n} from '@allmaps/tailwind'\n\nimport { TriangulatedWarpedMap } from './TriangulatedWarpedMap.js'\nimport { WarpedMapEvent, WarpedMapEventType } from '../shared/events.js'\nimport {\n  applyHomogeneousTransform,\n  createHomogeneousTransform,\n  invertHomogeneousTransform\n} from '../shared/homogeneous-transform.js'\nimport { createBuffer } from '../shared/webgl2.js'\nimport { getTilesAtOtherScaleFactors, tileKey } from '../shared/tiles.js'\n\nimport type { DebouncedFunc } from 'lodash-es'\n\nimport type { Image } from '@allmaps/iiif-parser'\nimport type { Line, Point, Tile, HomogeneousTransform } from '@allmaps/types'\n\nimport type {\n  LineLayer,\n  PointLayer,\n  SpecificWebGL2WarpedMapOptions,\n  WebGL2RendererOptions,\n  WebGL2WarpedMapOptions\n} from '../shared/types.js'\nimport type { CachedTile } from '../tilecache/CacheableTile.js'\nimport type { RenderOptions } from '../shared/types.js'\n\nconst THROTTLE_UPDATE_TEXTURES_WAIT_MS = 200\nconst THROTTLE_UPDATE_TEXTURES_OPTIONS = {\n  leading: true,\n  trailing: true\n}\n\nconst defaultRenderLineLayerOptions = {\n  viewportSize: 6,\n  color: black,\n  viewportBorderSize: 0,\n  borderColor: white\n}\n\nconst defaultRenderPointLayerOptions = {\n  viewportSize: 16,\n  color: black,\n  viewportBorderSize: 1,\n  borderColor: white\n}\n\nconst defaultWebgl2WarpedMapOptions = {\n  renderGcps: false,\n  renderGcpsColor: blue,\n  renderTransformedGcps: false,\n  renderTransformedGcpsColor: pink,\n  renderVectors: false,\n  renderMask: false,\n  renderMaskSize: 8,\n  renderMaskColor: pink,\n  renderFullMask: false,\n  renderFullMaskSize: 8,\n  renderFullMaskColor: green\n}\n\nconst DEBUG = false\n\nconst DEFAULT_OPACITY = 1\nconst DEFAULT_SATURATION = 1\n\nconst TEXTURES_MAX_HIGHER_LOG2_SCALE_FACTOR_DIFF = 5\nconst TEXTURES_MAX_LOWER_LOG2_SCALE_FACTOR_DIFF = 1\n\nexport function createWebGL2WarpedMapFactory(\n  gl: WebGL2RenderingContext,\n  mapProgram: WebGLProgram,\n  linesProgram: WebGLProgram,\n  pointsProgram: WebGLProgram\n) {\n  return (\n    mapId: string,\n    georeferencedMap: GeoreferencedMap,\n    options?: Partial<WebGL2WarpedMapOptions>\n  ) =>\n    new WebGL2WarpedMap(\n      mapId,\n      georeferencedMap,\n      gl,\n      mapProgram,\n      linesProgram,\n      pointsProgram,\n      options\n    )\n}\n\n/**\n * Class for WarpedMaps that are rendered with WebGL 2\n */\nexport class WebGL2WarpedMap extends TriangulatedWarpedMap {\n  // De facto make this a WarpedMapWithImageInfo\n  // (Multiple inhertance is not possible in TypeScript)\n  declare imageId: string\n  declare parsedImage: Image\n\n  webgl2WarpedMapOptions: SpecificWebGL2WarpedMapOptions\n\n  gl: WebGL2RenderingContext\n  mapProgram!: WebGLProgram\n  linesProgram!: WebGLProgram\n  pointsProgram!: WebGLProgram\n\n  mapVao: WebGLVertexArrayObject | null = null\n  linesVao: WebGLVertexArrayObject | null = null\n  pointsVao: WebGLVertexArrayObject | null = null\n\n  lineLayers: LineLayer[] = []\n  pointLayers: PointLayer[] = []\n\n  // Consider to store cachedTilesByTileKey as a quadtree for faster lookups\n  cachedTilesByTileKey: Map<string, CachedTile<ImageData>>\n  cachedTilesByTileUrl: Map<string, CachedTile<ImageData>>\n  cachedTilesForTexture: CachedTile<ImageData>[] = []\n  previousCachedTilesForTexture: CachedTile<ImageData>[] = []\n\n  opacity: number = DEFAULT_OPACITY\n  saturation: number = DEFAULT_SATURATION\n  renderOptions: RenderOptions = {}\n\n  cachedTilesTextureArray: WebGLTexture | null = null\n  cachedTilesResourceOriginPointsAndDimensionsTexture: WebGLTexture | null =\n    null\n  cachedTilesScaleFactorsTexture: WebGLTexture | null = null\n\n  // About renderHomogeneousTransform and InvertedRenderHomogeneousTransform:\n  // renderHomogeneousTransform is the product of:\n  // - the viewport's projectedGeoToClipTransform (projected geo coordinates -> clip coordinates)\n  // - the saved invertedRenderHomogeneousTransform (projected clip coordinates -> geo coordinates)\n  // since updateVertexBuffers ('where to draw triangles') run with possibly a different Viewport then renderInternal ('drawing the triangles'), a difference caused by throttling, there needs to be an adjustment.\n  // this adjustment is minimal: indeed, since invertedRenderHomogeneousTransform is set as the inverse of the viewport's projectedGeoToClipTransform in updateVertexBuffers()\n  // this renderHomogeneousTransform is almost the identity transform [1, 0, 0, 1, 0, 0].\n  invertedRenderHomogeneousTransform: HomogeneousTransform\n\n  private throttledUpdateTextures: DebouncedFunc<typeof this.updateTextures>\n\n  /**\n   * Creates an instance of WebGL2WarpedMap.\n   *\n   * @constructor\n   * @param mapId - ID of the map\n   * @param georeferencedMap - Georeferenced map used to construct the WarpedMap\n   * @param gl - WebGL rendering context\n   * @param mapProgram - WebGL program for map\n   * @param options - WarpedMapOptions\n   */\n  constructor(\n    mapId: string,\n    georeferencedMap: GeoreferencedMap,\n    gl: WebGL2RenderingContext,\n    mapProgram: WebGLProgram,\n    linesProgram: WebGLProgram,\n    pointsProgram: WebGLProgram,\n    options?: Partial<WebGL2WarpedMapOptions>\n  ) {\n    super(mapId, georeferencedMap, options)\n\n    this.cachedTilesByTileKey = new Map()\n    this.cachedTilesByTileUrl = new Map()\n\n    this.webgl2WarpedMapOptions = mergeOptions(\n      defaultWebgl2WarpedMapOptions,\n      options\n    )\n\n    this.gl = gl\n    this.initializeWebGL(mapProgram, linesProgram, pointsProgram)\n\n    this.invertedRenderHomogeneousTransform = createHomogeneousTransform()\n\n    this.throttledUpdateTextures = throttle(\n      this.updateTextures.bind(this),\n      THROTTLE_UPDATE_TEXTURES_WAIT_MS,\n      THROTTLE_UPDATE_TEXTURES_OPTIONS\n    )\n  }\n\n  initializeWebGL(\n    mapProgram: WebGLProgram,\n    linesProgram: WebGLProgram,\n    pointsProgram: WebGLProgram\n  ) {\n    this.mapProgram = mapProgram\n    this.linesProgram = linesProgram\n    this.pointsProgram = pointsProgram\n\n    this.mapVao = this.gl.createVertexArray()\n    this.linesVao = this.gl.createVertexArray()\n    this.pointsVao = this.gl.createVertexArray()\n\n    this.cachedTilesTextureArray = this.gl.createTexture()\n    this.cachedTilesScaleFactorsTexture = this.gl.createTexture()\n    this.cachedTilesResourceOriginPointsAndDimensionsTexture =\n      this.gl.createTexture()\n  }\n\n  /**\n   * Update the vertex buffers of this warped map\n   *\n   * @param projectedGeoToClipHomogeneousTransform - Transform from projected geo coordinates to webgl2 coordinates in the [-1, 1] range. Equivalent to OpenLayers' projectionTransform.\n   */\n  updateVertexBuffers(\n    projectedGeoToClipHomogeneousTransform: HomogeneousTransform,\n    partialWebgl2RendererOptions: Partial<WebGL2RendererOptions>\n  ) {\n    this.invertedRenderHomogeneousTransform = invertHomogeneousTransform(\n      projectedGeoToClipHomogeneousTransform\n    )\n\n    if (partialWebgl2RendererOptions.renderMaps) {\n      this.updateVertexBuffersMap(projectedGeoToClipHomogeneousTransform)\n    }\n    if (partialWebgl2RendererOptions.renderLines) {\n      this.updateVertexBuffersLines(projectedGeoToClipHomogeneousTransform)\n    }\n    if (partialWebgl2RendererOptions.renderPoints) {\n      this.updateVertexBuffersPoints(projectedGeoToClipHomogeneousTransform)\n    }\n  }\n\n  /**\n   * Clear textures for this map\n   */\n  clearTextures() {\n    // TODO: implement clearing of texture: maybe a 1x1x1 texture that's empty\n    this.throttledUpdateTextures()\n  }\n\n  /**\n   * Add cached tile to the textures of this map and update textures\n   *\n   * @param cachedTile\n   */\n  addCachedTileAndUpdateTextures(cachedTile: CachedTile<ImageData>) {\n    this.cachedTilesByTileKey.set(cachedTile.tileKey, cachedTile)\n    this.cachedTilesByTileUrl.set(cachedTile.tileUrl, cachedTile)\n    this.throttledUpdateTextures()\n  }\n\n  /**\n   * Remove cached tile from the textures of this map and update textures\n   *\n   * @param tileUrl\n   */\n  removeCachedTileAndUpdateTextures(tileUrl: string) {\n    const cachedTile = this.cachedTilesByTileUrl.get(tileUrl)\n    if (cachedTile) {\n      this.cachedTilesByTileKey.delete(cachedTile.tileKey)\n    }\n    this.cachedTilesByTileUrl.delete(tileUrl)\n    this.throttledUpdateTextures()\n  }\n\n  cancelThrottledFunctions() {\n    this.throttledUpdateTextures.cancel()\n  }\n\n  destroy() {\n    this.gl.deleteVertexArray(this.mapVao)\n    this.gl.deleteVertexArray(this.linesVao)\n    this.gl.deleteVertexArray(this.pointsVao)\n    this.gl.deleteTexture(this.cachedTilesTextureArray)\n    this.gl.deleteTexture(this.cachedTilesScaleFactorsTexture)\n    this.gl.deleteTexture(\n      this.cachedTilesResourceOriginPointsAndDimensionsTexture\n    )\n\n    this.cancelThrottledFunctions()\n\n    super.destroy()\n  }\n\n  private setLineLayers() {\n    this.lineLayers = []\n\n    if (this.webgl2WarpedMapOptions.renderVectors) {\n      this.lineLayers.push({\n        projectedGeoLines: pointsAndPointsToLines(\n          this.projectedGeoPoints,\n          this.projectedGeoTransformedResourcePoints\n        ),\n        projectedGeoPreviousLines: pointsAndPointsToLines(\n          this.projectedGeoPoints,\n          this.projectedGeoPreviousTransformedResourcePoints\n        ),\n        viewportSize: this.webgl2WarpedMapOptions.renderVectorsSize,\n        color: this.webgl2WarpedMapOptions.renderVectorsColor,\n        viewportBorderSize: this.webgl2WarpedMapOptions.renderVectorsBorderSize,\n        borderColor: this.webgl2WarpedMapOptions.renderVectorsBorderColor\n      })\n    }\n\n    if (this.webgl2WarpedMapOptions.renderMask) {\n      this.lineLayers.push({\n        projectedGeoLines: lineStringToLines(\n          this.projectedGeoTriangulationMask\n        ),\n        projectedGeoPreviousLines: lineStringToLines(\n          this.projectedGeoPreviousTriangulationMask\n        ),\n        viewportSize: this.webgl2WarpedMapOptions.renderMaskSize,\n        color: this.webgl2WarpedMapOptions.renderMaskColor,\n        viewportBorderSize: this.webgl2WarpedMapOptions.renderMaskBorderSize,\n        borderColor: this.webgl2WarpedMapOptions.renderMaskBorderColor\n      })\n    }\n\n    if (this.webgl2WarpedMapOptions.renderFullMask) {\n      this.lineLayers.push({\n        projectedGeoLines: lineStringToLines(this.projectedGeoFullMask),\n        viewportSize: this.webgl2WarpedMapOptions.renderFullMaskSize,\n        color: this.webgl2WarpedMapOptions.renderFullMaskColor,\n        viewportBorderSize:\n          this.webgl2WarpedMapOptions.renderFullMaskBorderSize,\n        borderColor: this.webgl2WarpedMapOptions.renderFullMaskBorderColor\n      })\n    }\n  }\n\n  private setPointLayers() {\n    this.pointLayers = []\n\n    if (this.webgl2WarpedMapOptions.renderGcps) {\n      this.pointLayers.push({\n        projectedGeoPoints: this.projectedGeoPoints,\n        viewportSize: this.webgl2WarpedMapOptions.renderGcpsSize,\n        color: this.webgl2WarpedMapOptions.renderGcpsColor,\n        viewportBorderSize: this.webgl2WarpedMapOptions.renderGcpsBorderSize,\n        borderColor: this.webgl2WarpedMapOptions.renderGcpsBorderColor\n      })\n    }\n\n    if (this.webgl2WarpedMapOptions.renderTransformedGcps) {\n      this.pointLayers.push({\n        projectedGeoPoints: this.projectedGeoTransformedResourcePoints,\n        projectedGeoPreviousPoints:\n          this.projectedGeoPreviousTransformedResourcePoints,\n        viewportSize: this.webgl2WarpedMapOptions.renderTransformedGcpsSize,\n        color: this.webgl2WarpedMapOptions.renderTransformedGcpsColor,\n        viewportBorderSize:\n          this.webgl2WarpedMapOptions.renderTransformedGcpsBorderSize,\n        borderColor:\n          this.webgl2WarpedMapOptions.renderTransformedGcpsBorderColor\n      })\n    }\n\n    if (DEBUG) {\n      this.pointLayers.push({\n        projectedGeoPoints: this.projectedGeoPreviousTrianglePoints,\n        color: gray\n      })\n      this.pointLayers.push({\n        projectedGeoPoints: this.projectedGeoTrianglePoints,\n        color: yellow\n      })\n    }\n  }\n\n  private updateVertexBuffersMap(\n    projectedGeoToClipHomogeneousTransform: HomogeneousTransform\n  ) {\n    if (!this.mapVao) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.mapProgram\n    gl.bindVertexArray(this.mapVao)\n\n    // Resource triangle points\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(this.resourceTrianglePoints.flat()),\n      2,\n      'a_resourceTrianglePoint'\n    )\n\n    // Clip previous and new triangle points\n\n    const clipPreviousTrianglePoints =\n      this.projectedGeoPreviousTrianglePoints.map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipPreviousTrianglePoints.flat()),\n      2,\n      'a_clipPreviousTrianglePoint'\n    )\n\n    const clipTrianglePoints = this.projectedGeoTrianglePoints.map((point) =>\n      applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipTrianglePoints.flat()),\n      2,\n      'a_clipTrianglePoint'\n    )\n\n    // Previous and new distortion\n    // Note: we must update the distortion data even when we don't render distortions\n    // to ensure this array buffer is of the correct length, for example when triangulation changes\n\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(this.previousTrianglePointsDistortion),\n      1,\n      'a_previousTrianglePointDistortion'\n    )\n\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(this.trianglePointsDistortion),\n      1,\n      'a_trianglePointDistortion'\n    )\n\n    // Triangle Point index\n\n    const trianglePointsTriangleIndex = new Float32Array(\n      this.resourceTrianglePoints.length\n    ).map((_v, i) => {\n      return i\n    })\n    createBuffer(\n      gl,\n      program,\n      trianglePointsTriangleIndex,\n      1,\n      'a_trianglePointIndex'\n    )\n  }\n\n  private updateVertexBuffersLines(\n    projectedGeoToClipHomogeneousTransform: HomogeneousTransform\n  ) {\n    if (!this.linesVao) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.linesProgram\n    gl.bindVertexArray(this.linesVao)\n\n    this.setLineLayers()\n\n    const clipSixPoints = this.lineLayers\n      .reduce(\n        (accumulator: Line[], lineLayer) =>\n          accumulator.concat(lineLayer.projectedGeoLines),\n        []\n      )\n      .map((projectedGeoLine) => [\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[1]\n      ])\n      .flat()\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipSixPoints.flat()),\n      2,\n      'a_clipPoint'\n    )\n\n    const clipSixOtherPoints = this.lineLayers\n      .reduce(\n        (accumulator: Line[], lineLayer) =>\n          accumulator.concat(lineLayer.projectedGeoLines),\n        []\n      )\n      .map((projectedGeoLine) => [\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[0]\n      ])\n      .flat()\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipSixOtherPoints.flat()),\n      2,\n      'a_clipOtherPoint'\n    )\n\n    const clipSixPreviousPoints = this.lineLayers\n      .reduce(\n        (accumulator: Line[], lineLayer) =>\n          accumulator.concat(\n            lineLayer.projectedGeoPreviousLines || lineLayer.projectedGeoLines\n          ),\n        []\n      )\n      .map((projectedGeoLine) => [\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[1]\n      ])\n      .flat()\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipSixPreviousPoints.flat()),\n      2,\n      'a_clipPreviousPoint'\n    )\n\n    const clipSixPreviousOtherPoints = this.lineLayers\n      .reduce(\n        (accumulator: Line[], lineLayer) =>\n          accumulator.concat(\n            lineLayer.projectedGeoPreviousLines || lineLayer.projectedGeoLines\n          ),\n        []\n      )\n      .map((projectedGeoLine) => [\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[1],\n        projectedGeoLine[0],\n        projectedGeoLine[0],\n        projectedGeoLine[0]\n      ])\n      .flat()\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipSixPreviousOtherPoints.flat()),\n      2,\n      'a_clipPreviousOtherPoint'\n    )\n\n    const sixIsOtherPoints = this.lineLayers.reduce(\n      (accumulator: number[], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) => [\n            0, 0, 1, 0, 0, 1\n          ])\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(sixIsOtherPoints),\n      1,\n      'a_isOtherPoint'\n    )\n\n    const sixNormalSigns = this.lineLayers.reduce(\n      (accumulator: number[], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) => [\n            +1, -1, +1, +1, -1, +1\n          ])\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(sixNormalSigns),\n      1,\n      'a_normalSign'\n    )\n\n    const viewportSizes = this.lineLayers.reduce(\n      (accumulator: number[], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) =>\n            Array(6).fill(\n              lineLayer.viewportSize ??\n                defaultRenderLineLayerOptions.viewportSize\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(viewportSizes),\n      1,\n      'a_viewportSize'\n    )\n\n    const colors = this.lineLayers.reduce(\n      (accumulator: number[][], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) =>\n            Array(6).fill(\n              hexToFractionalOpaqueRgba(\n                lineLayer.color ?? defaultRenderLineLayerOptions.color\n              )\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(gl, program, new Float32Array(colors.flat()), 4, 'a_color')\n\n    const viewportBorderSizes = this.lineLayers.reduce(\n      (accumulator: number[], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) =>\n            Array(6).fill(\n              lineLayer.viewportBorderSize ??\n                defaultRenderLineLayerOptions.viewportBorderSize\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(viewportBorderSizes),\n      1,\n      'a_viewportBorderSize'\n    )\n\n    const borderColors = this.lineLayers.reduce(\n      (accumulator: number[][], lineLayer) =>\n        accumulator.concat(\n          lineLayer.projectedGeoLines.flatMap((_projectedGeoLine) =>\n            Array(6).fill(\n              hexToFractionalOpaqueRgba(\n                lineLayer.borderColor ??\n                  defaultRenderLineLayerOptions.borderColor\n              )\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(borderColors.flat()),\n      4,\n      'a_borderColor'\n    )\n  }\n\n  private updateVertexBuffersPoints(\n    projectedGeoToClipHomogeneousTransform: HomogeneousTransform\n  ) {\n    if (!this.pointsVao) {\n      return\n    }\n\n    const gl = this.gl\n    const program = this.pointsProgram\n    gl.bindVertexArray(this.pointsVao)\n\n    this.setPointLayers()\n\n    const clipPoints = this.pointLayers\n      .reduce(\n        (accumulator: Point[], pointLayer) =>\n          accumulator.concat(pointLayer.projectedGeoPoints),\n        []\n      )\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipPoints.flat()),\n      2,\n      'a_clipPoint'\n    )\n\n    const clipPreviousPoints = this.pointLayers\n      .reduce(\n        (accumulator: Point[], pointLayer) =>\n          accumulator.concat(\n            pointLayer.projectedGeoPreviousPoints ||\n              pointLayer.projectedGeoPoints\n          ),\n        []\n      )\n      .map((point) =>\n        applyHomogeneousTransform(projectedGeoToClipHomogeneousTransform, point)\n      )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(clipPreviousPoints.flat()),\n      2,\n      'a_clipPreviousPoint'\n    )\n\n    const viewportSizes = this.pointLayers.reduce(\n      (accumulator: number[], pointLayer) =>\n        accumulator.concat(\n          pointLayer.projectedGeoPoints.map(\n            (_projectedGeoPoint) =>\n              pointLayer.viewportSize ??\n              defaultRenderPointLayerOptions.viewportSize\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(viewportSizes),\n      1,\n      'a_viewportSize'\n    )\n\n    const colors = this.pointLayers.reduce(\n      (accumulator: number[][], pointLayer) =>\n        accumulator.concat(\n          pointLayer.projectedGeoPoints.map((_projectedGeoPoint) =>\n            hexToFractionalOpaqueRgba(\n              pointLayer.color ?? defaultRenderPointLayerOptions.color\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(gl, program, new Float32Array(colors.flat()), 4, 'a_color')\n\n    const viewportBorderSizes = this.pointLayers.reduce(\n      (accumulator: number[], pointLayer) =>\n        accumulator.concat(\n          pointLayer.projectedGeoPoints.map(\n            (_projectedGeoPoint) =>\n              pointLayer.viewportBorderSize ??\n              defaultRenderPointLayerOptions.viewportBorderSize\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(viewportBorderSizes),\n      1,\n      'a_viewportBorderSize'\n    )\n\n    const borderColors = this.pointLayers.reduce(\n      (accumulator: number[][], pointLayer) =>\n        accumulator.concat(\n          pointLayer.projectedGeoPoints.map((_projectedGeoPoint) =>\n            hexToFractionalOpaqueRgba(\n              pointLayer.borderColor ??\n                defaultRenderPointLayerOptions.borderColor\n            )\n          )\n        ),\n      []\n    )\n    createBuffer(\n      gl,\n      program,\n      new Float32Array(borderColors.flat()),\n      4,\n      'a_borderColor'\n    )\n  }\n\n  private async updateTextures() {\n    const gl = this.gl\n\n    // Find out which tiles to include in texture\n    this.updateCachedTilesForTextures()\n\n    // Don't update if same request is (non-null) subset of previous request\n    // This reduces (expensive) texture updates when just reducing the number of tiles\n    // (But keeps them when all tiles are gone to free up texture)\n    // And blocking updates on equal requests is important to\n    // prevent triggering an infinite loop\n    // caused by the TEXTURESUPDATED event at the end\n    if (\n      this.cachedTilesForTexture.length !== 0 &&\n      subSetArray(\n        this.previousCachedTilesForTexture.map(\n          (textureTile) => textureTile.tileUrl\n        ),\n        this.cachedTilesForTexture.map((textureTile) => textureTile.tileUrl)\n      )\n    ) {\n      return\n    }\n\n    // Cached tiles texture array\n\n    const requiredTextureWidth = Math.max(\n      ...this.parsedImage.tileZoomLevels.map((size) => size.width)\n    )\n    const requiredTextureHeigt = Math.max(\n      ...this.parsedImage.tileZoomLevels.map((size) => size.height)\n    )\n    const requiredTextureDepth = this.cachedTilesForTexture.length\n\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4)\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.cachedTilesTextureArray)\n\n    gl.texImage3D(\n      gl.TEXTURE_2D_ARRAY,\n      0,\n      gl.RGBA,\n      requiredTextureWidth,\n      requiredTextureHeigt,\n      requiredTextureDepth,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      null\n    )\n\n    for (let i = 0; i < this.cachedTilesForTexture.length; i++) {\n      const imageData = this.cachedTilesForTexture[i].data\n\n      const pbo = gl.createBuffer()\n      gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, pbo)\n      gl.bufferData(gl.PIXEL_UNPACK_BUFFER, imageData.data, gl.STATIC_DRAW)\n\n      gl.texSubImage3D(\n        gl.TEXTURE_2D_ARRAY,\n        0,\n        0,\n        0,\n        i,\n        imageData.width,\n        imageData.height,\n        1,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        0\n      )\n\n      gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null)\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\n    // Cached tiles resource origin points and dimensions texture\n\n    const cachedTilesResourceOriginPointsAndDimensions =\n      this.cachedTilesForTexture.map((textureTile) => {\n        if (\n          textureTile &&\n          textureTile.imageRequest &&\n          textureTile.imageRequest.region\n        ) {\n          return [\n            textureTile.imageRequest.region.x,\n            textureTile.imageRequest.region.y,\n            textureTile.imageRequest.region.width,\n            textureTile.imageRequest.region.height\n          ]\n        }\n      }) as number[][]\n\n    gl.bindTexture(\n      gl.TEXTURE_2D,\n      this.cachedTilesResourceOriginPointsAndDimensionsTexture\n    )\n\n    // A previous verions used gl.RGBA_INTEGER as this texture's format\n    // However, this seemed to cause Chrome to crash on some systems while\n    // zooming in and out. Using gl.RED_INTEGER and multiplying the width by 4\n    // to account for the 4 values per tile seems to fix the issue.\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.R32I,\n      1,\n      this.cachedTilesForTexture.length * 4,\n      0,\n      gl.RED_INTEGER,\n      gl.INT,\n      new Int32Array(cachedTilesResourceOriginPointsAndDimensions.flat())\n    )\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\n    // Cached tiles scale factors texture\n\n    const cachedTilesScaleFactors = this.cachedTilesForTexture.map(\n      (textureTile) => textureTile.tile.tileZoomLevel.scaleFactor\n    )\n\n    gl.bindTexture(gl.TEXTURE_2D, this.cachedTilesScaleFactorsTexture)\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.R32I,\n      1,\n      this.cachedTilesForTexture.length,\n      0,\n      gl.RED_INTEGER,\n      gl.INT,\n      new Int32Array(cachedTilesScaleFactors)\n    )\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\n    this.dispatchEvent(new WarpedMapEvent(WarpedMapEventType.TEXTURESUPDATED))\n  }\n\n  private updateCachedTilesForTextures() {\n    // Select tiles form tileCache that should be included in the texture\n    const cachedTiles = []\n    const cachedTilesAtOtherScaleFactors = []\n    const overviewCachedTiles = []\n\n    // Try to include tiles that were requested\n    for (const fetchableTile of this.fetchableTilesForViewport) {\n      const cachedTile = this.cachedTilesByTileUrl.get(fetchableTile.tileUrl)\n      if (cachedTile) {\n        // If they are available, include them\n        cachedTiles.push(cachedTile)\n      } else {\n        // If they are not available, include their parents or children if they are available\n        for (const cachedTile of this.getCachedTilesAtOtherScaleFactors(\n          fetchableTile.tile\n        )) {\n          cachedTilesAtOtherScaleFactors.push(cachedTile)\n        }\n      }\n    }\n\n    // Try to include tiles that are at overview zoomlevel\n    for (const fetchableTile of this.overviewFetchableTilesForViewport) {\n      const cachedTile = this.cachedTilesByTileUrl.get(fetchableTile.tileUrl)\n      if (cachedTile) {\n        // If they are available, consider to include them\n        const tileZoolLevelTilesCount = this.tileZoomLevelForViewport\n          ? this.tileZoomLevelForViewport.rows *\n            this.tileZoomLevelForViewport.columns\n          : undefined\n        // If this map's cached tiles don't already cover the entire zoomlevel\n        if (\n          cachedTiles.length === 0 ||\n          (tileZoolLevelTilesCount &&\n            cachedTiles.length < tileZoolLevelTilesCount)\n        ) {\n          overviewCachedTiles.push(cachedTile)\n        }\n      }\n    }\n\n    let cachedTilesForTextures = [\n      ...cachedTiles,\n      ...cachedTilesAtOtherScaleFactors,\n      ...overviewCachedTiles\n    ]\n\n    // Making tiles unique by tileUrl\n    const cachedTilesForTexturesByTileUrl: Map<\n      string,\n      CachedTile<ImageData>\n    > = new Map()\n    cachedTilesForTextures.forEach((cachedTile) =>\n      cachedTilesForTexturesByTileUrl.set(cachedTile.tileUrl, cachedTile)\n    )\n    cachedTilesForTextures = [...cachedTilesForTexturesByTileUrl.values()]\n\n    this.previousCachedTilesForTexture = this.cachedTilesForTexture\n    this.cachedTilesForTexture = cachedTilesForTextures\n\n    return\n  }\n\n  private getCachedTilesAtOtherScaleFactors(\n    tile: Tile\n  ): CachedTile<ImageData>[] {\n    if (this.cachedTilesByTileUrl.size === 0) {\n      return []\n    }\n    if (!this.tileZoomLevelForViewport) {\n      return []\n    }\n\n    const cachedTiles = []\n    for (tile of getTilesAtOtherScaleFactors(\n      tile,\n      this.parsedImage,\n      this.tileZoomLevelForViewport.scaleFactor,\n      TEXTURES_MAX_LOWER_LOG2_SCALE_FACTOR_DIFF,\n      TEXTURES_MAX_HIGHER_LOG2_SCALE_FACTOR_DIFF,\n      this.tileInCachedTiles.bind(this) // Only consider tiles in cache,\n    )) {\n      const cachedTile = this.tileToCachedTile(tile)\n      if (cachedTile) {\n        cachedTiles.push(cachedTile)\n      } else {\n        throw new Error(\"Tile supposed to be in cache isn't.\")\n      }\n    }\n\n    return cachedTiles\n  }\n\n  // Lookup by tileKey (zoomlevel, row, column) instead of tileUrl\n  // Because computing the tileUrl for every tile is expensive\n  private tileToCachedTile(tile: Tile): CachedTile<ImageData> | undefined {\n    return this.cachedTilesByTileKey.get(tileKey(tile))\n  }\n\n  private tileInCachedTiles(tile: Tile): boolean {\n    return this.cachedTilesByTileKey.has(tileKey(tile))\n  }\n}\n"],"names":["cachedTile"],"mappings":"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"}