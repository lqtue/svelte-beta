{"version":3,"file":"homogeneous-transform.js","sources":["../../src/shared/homogeneous-transform.ts"],"sourcesContent":["import type { HomogeneousTransform, Point, Matrix4 } from '@allmaps/types'\n\nexport function applyHomogeneousTransform(\n  homogeneousTransform: HomogeneousTransform,\n  coordinate: Point\n): Point {\n  const x = coordinate[0]\n  const y = coordinate[1]\n\n  return [\n    homogeneousTransform[0] * x +\n      homogeneousTransform[2] * y +\n      homogeneousTransform[4],\n    homogeneousTransform[1] * x +\n      homogeneousTransform[3] * y +\n      homogeneousTransform[5]\n  ]\n}\n\nexport function createHomogeneousTransform(): HomogeneousTransform {\n  return [1, 0, 0, 1, 0, 0]\n}\n\nexport function multiplyHomogeneousTransform(\n  homogeneousTransform1: HomogeneousTransform,\n  homogeneousTransform2: HomogeneousTransform\n): HomogeneousTransform {\n  const a1 = homogeneousTransform1[0]\n  const b1 = homogeneousTransform1[1]\n  const c1 = homogeneousTransform1[2]\n  const d1 = homogeneousTransform1[3]\n  const e1 = homogeneousTransform1[4]\n  const f1 = homogeneousTransform1[5]\n  const a2 = homogeneousTransform2[0]\n  const b2 = homogeneousTransform2[1]\n  const c2 = homogeneousTransform2[2]\n  const d2 = homogeneousTransform2[3]\n  const e2 = homogeneousTransform2[4]\n  const f2 = homogeneousTransform2[5]\n\n  return [\n    a1 * a2 + c1 * b2,\n    b1 * a2 + d1 * b2,\n    a1 * c2 + c1 * d2,\n    b1 * c2 + d1 * d2,\n    a1 * e2 + c1 * f2 + e1,\n    b1 * e2 + d1 * f2 + f1\n  ]\n}\n\nexport function rotateHomogeneousTransform(\n  homogeneousTransform: HomogeneousTransform,\n  angle: number\n): HomogeneousTransform {\n  const cos = Math.cos(angle)\n  const sin = Math.sin(angle)\n  return multiplyHomogeneousTransform(homogeneousTransform, [\n    cos,\n    sin,\n    -sin,\n    cos,\n    0,\n    0\n  ])\n}\n\nexport function scaleHomogeneousTransform(\n  homogeneousTransform: HomogeneousTransform,\n  x: number,\n  y: number\n): HomogeneousTransform {\n  return multiplyHomogeneousTransform(homogeneousTransform, [x, 0, 0, y, 0, 0])\n}\n\nexport function translateHomogeneousTransform(\n  homogeneousTransform: HomogeneousTransform,\n  dx: number,\n  dy: number\n): HomogeneousTransform {\n  return multiplyHomogeneousTransform(homogeneousTransform, [\n    1,\n    0,\n    0,\n    1,\n    dx,\n    dy\n  ])\n}\n\nexport function composeHomogeneousTransform(\n  dx1: number,\n  dy1: number,\n  sx: number,\n  sy: number,\n  angle: number,\n  dx2: number,\n  dy2: number\n): HomogeneousTransform {\n  const sin = Math.sin(angle)\n  const cos = Math.cos(angle)\n\n  return [\n    sx * cos,\n    sy * sin,\n    -sx * sin,\n    sy * cos,\n    dx2 * sx * cos - dy2 * sx * sin + dx1,\n    dx2 * sy * sin + dy2 * sy * cos + dy1\n  ]\n}\n\nexport function invertHomogeneousTransform(\n  source: HomogeneousTransform\n): HomogeneousTransform {\n  const determinant = getDeterminant(source)\n\n  const a = source[0]\n  const b = source[1]\n  const c = source[2]\n  const d = source[3]\n  const e = source[4]\n  const f = source[5]\n\n  return [\n    d / determinant,\n    -b / determinant,\n    -c / determinant,\n    a / determinant,\n    (c * f - d * e) / determinant,\n    -(a * f - b * e) / determinant\n  ]\n}\n\nexport function getDeterminant(mat: HomogeneousTransform): number {\n  return mat[0] * mat[3] - mat[1] * mat[2]\n}\n\nexport function homogeneousTransformToMatrix4(\n  homogeneousTransform: HomogeneousTransform\n): Matrix4 {\n  const matrix4: Matrix4 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n\n  matrix4[0] = homogeneousTransform[0]\n  matrix4[1] = homogeneousTransform[1]\n  matrix4[4] = homogeneousTransform[2]\n  matrix4[5] = homogeneousTransform[3]\n  matrix4[12] = homogeneousTransform[4]\n  matrix4[13] = homogeneousTransform[5]\n\n  return matrix4\n}\n"],"names":[],"mappings":"AAEO,SAAS,0BACd,sBACA,YACO;AACP,QAAM,IAAI,WAAW,CAAC;AACtB,QAAM,IAAI,WAAW,CAAC;AAEtB,SAAO;AAAA,IACL,qBAAqB,CAAC,IAAI,IACxB,qBAAqB,CAAC,IAAI,IAC1B,qBAAqB,CAAC;AAAA,IACxB,qBAAqB,CAAC,IAAI,IACxB,qBAAqB,CAAC,IAAI,IAC1B,qBAAqB,CAAC;AAAA,EAAA;AAE5B;AAEO,SAAS,6BAAmD;AACjE,SAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC1B;AAEO,SAAS,6BACd,uBACA,uBACsB;AACtB,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAClC,QAAM,KAAK,sBAAsB,CAAC;AAElC,SAAO;AAAA,IACL,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK,KAAK;AAAA,IACpB,KAAK,KAAK,KAAK,KAAK;AAAA,EAAA;AAExB;AAyCO,SAAS,4BACd,KACA,KACA,IACA,IACA,OACA,KACA,KACsB;AACtB,QAAM,MAAM,KAAK,IAAI,KAAK;AAC1B,QAAM,MAAM,KAAK,IAAI,KAAK;AAE1B,SAAO;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,CAAC,KAAK;AAAA,IACN,KAAK;AAAA,IACL,MAAM,KAAK,MAAM,MAAM,KAAK,MAAM;AAAA,IAClC,MAAM,KAAK,MAAM,MAAM,KAAK,MAAM;AAAA,EAAA;AAEtC;AAEO,SAAS,2BACd,QACsB;AACtB,QAAM,cAAc,eAAe,MAAM;AAEzC,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,IAAI,OAAO,CAAC;AAElB,SAAO;AAAA,IACL,IAAI;AAAA,IACJ,CAAC,IAAI;AAAA,IACL,CAAC,IAAI;AAAA,IACL,IAAI;AAAA,KACH,IAAI,IAAI,IAAI,KAAK;AAAA,IAClB,EAAE,IAAI,IAAI,IAAI,KAAK;AAAA,EAAA;AAEvB;AAEO,SAAS,eAAe,KAAmC;AAChE,SAAO,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC;AACzC;AAEO,SAAS,8BACd,sBACS;AACT,QAAM,UAAmB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAExE,UAAQ,CAAC,IAAI,qBAAqB,CAAC;AACnC,UAAQ,CAAC,IAAI,qBAAqB,CAAC;AACnC,UAAQ,CAAC,IAAI,qBAAqB,CAAC;AACnC,UAAQ,CAAC,IAAI,qBAAqB,CAAC;AACnC,UAAQ,EAAE,IAAI,qBAAqB,CAAC;AACpC,UAAQ,EAAE,IAAI,qBAAqB,CAAC;AAEpC,SAAO;AACT;"}